# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package FiftyOneDegrees::PatternV3;
use base qw(Exporter);
use base qw(DynaLoader);
package FiftyOneDegrees::PatternV3c;
bootstrap FiftyOneDegrees::PatternV3;
package FiftyOneDegrees::PatternV3;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package FiftyOneDegrees::PatternV3;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package FiftyOneDegrees::PatternV3;

*initWithPropertyArray = *FiftyOneDegrees::PatternV3c::initWithPropertyArray;
*initWithPropertyString = *FiftyOneDegrees::PatternV3c::initWithPropertyString;
*destroy = *FiftyOneDegrees::PatternV3c::destroy;
*createWorkset = *FiftyOneDegrees::PatternV3c::createWorkset;
*freeWorkset = *FiftyOneDegrees::PatternV3c::freeWorkset;
*match = *FiftyOneDegrees::PatternV3c::match;
*setValues = *FiftyOneDegrees::PatternV3c::setValues;
*getString = *FiftyOneDegrees::PatternV3c::getString;
*getValueName = *FiftyOneDegrees::PatternV3c::getValueName;
*getPropertyName = *FiftyOneDegrees::PatternV3c::getPropertyName;
*processDeviceCSV = *FiftyOneDegrees::PatternV3c::processDeviceCSV;
*processDeviceJSON = *FiftyOneDegrees::PatternV3c::processDeviceJSON;
*destroyDataset = *FiftyOneDegrees::PatternV3c::destroyDataset;
*dataSetInitWithPropertyString = *FiftyOneDegrees::PatternV3c::dataSetInitWithPropertyString;
*getMatch = *FiftyOneDegrees::PatternV3c::getMatch;

############# Class : FiftyOneDegrees::PatternV3::RANGE ##############

package FiftyOneDegrees::PatternV3::RANGE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_lower_get = *FiftyOneDegrees::PatternV3c::RANGE_lower_get;
*swig_lower_set = *FiftyOneDegrees::PatternV3c::RANGE_lower_set;
*swig_upper_get = *FiftyOneDegrees::PatternV3c::RANGE_upper_get;
*swig_upper_set = *FiftyOneDegrees::PatternV3c::RANGE_upper_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_RANGE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_RANGE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::AsciiString ##############

package FiftyOneDegrees::PatternV3::AsciiString;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_length_get = *FiftyOneDegrees::PatternV3c::AsciiString_length_get;
*swig_length_set = *FiftyOneDegrees::PatternV3c::AsciiString_length_set;
*swig_firstByte_get = *FiftyOneDegrees::PatternV3c::AsciiString_firstByte_get;
*swig_firstByte_set = *FiftyOneDegrees::PatternV3c::AsciiString_firstByte_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_AsciiString(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_AsciiString($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Component ##############

package FiftyOneDegrees::PatternV3::Component;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_componentId_get = *FiftyOneDegrees::PatternV3c::Component_componentId_get;
*swig_componentId_set = *FiftyOneDegrees::PatternV3c::Component_componentId_set;
*swig_nameOffset_get = *FiftyOneDegrees::PatternV3c::Component_nameOffset_get;
*swig_nameOffset_set = *FiftyOneDegrees::PatternV3c::Component_nameOffset_set;
*swig_defaultProfileOffset_get = *FiftyOneDegrees::PatternV3c::Component_defaultProfileOffset_get;
*swig_defaultProfileOffset_set = *FiftyOneDegrees::PatternV3c::Component_defaultProfileOffset_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Component(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Component($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Map ##############

package FiftyOneDegrees::PatternV3::Map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_nameOffset_get = *FiftyOneDegrees::PatternV3c::Map_nameOffset_get;
*swig_nameOffset_set = *FiftyOneDegrees::PatternV3c::Map_nameOffset_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::NodeNumericIndex ##############

package FiftyOneDegrees::PatternV3::NodeNumericIndex;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_value_get = *FiftyOneDegrees::PatternV3c::NodeNumericIndex_value_get;
*swig_value_set = *FiftyOneDegrees::PatternV3c::NodeNumericIndex_value_set;
*swig_relatedNodeOffset_get = *FiftyOneDegrees::PatternV3c::NodeNumericIndex_relatedNodeOffset_get;
*swig_relatedNodeOffset_set = *FiftyOneDegrees::PatternV3c::NodeNumericIndex_relatedNodeOffset_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_NodeNumericIndex(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_NodeNumericIndex($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::NodeIndexValue ##############

package FiftyOneDegrees::PatternV3::NodeIndexValue;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_characters_get = *FiftyOneDegrees::PatternV3c::NodeIndexValue_characters_get;
*swig_characters_set = *FiftyOneDegrees::PatternV3c::NodeIndexValue_characters_set;
*swig_integer_get = *FiftyOneDegrees::PatternV3c::NodeIndexValue_integer_get;
*swig_integer_set = *FiftyOneDegrees::PatternV3c::NodeIndexValue_integer_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_NodeIndexValue(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_NodeIndexValue($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::NodeIndex ##############

package FiftyOneDegrees::PatternV3::NodeIndex;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_isString_get = *FiftyOneDegrees::PatternV3c::NodeIndex_isString_get;
*swig_isString_set = *FiftyOneDegrees::PatternV3c::NodeIndex_isString_set;
*swig_relatedNodeOffset_get = *FiftyOneDegrees::PatternV3c::NodeIndex_relatedNodeOffset_get;
*swig_relatedNodeOffset_set = *FiftyOneDegrees::PatternV3c::NodeIndex_relatedNodeOffset_set;
*swig_value_get = *FiftyOneDegrees::PatternV3c::NodeIndex_value_get;
*swig_value_set = *FiftyOneDegrees::PatternV3c::NodeIndex_value_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_NodeIndex(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_NodeIndex($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::NodeIndex_value ##############

package FiftyOneDegrees::PatternV3::NodeIndex_value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_characters_get = *FiftyOneDegrees::PatternV3c::NodeIndex_value_characters_get;
*swig_characters_set = *FiftyOneDegrees::PatternV3c::NodeIndex_value_characters_set;
*swig_integer_get = *FiftyOneDegrees::PatternV3c::NodeIndex_value_integer_get;
*swig_integer_set = *FiftyOneDegrees::PatternV3c::NodeIndex_value_integer_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_NodeIndex_value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_NodeIndex_value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::String ##############

package FiftyOneDegrees::PatternV3::String;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_value_get = *FiftyOneDegrees::PatternV3c::String_value_get;
*swig_value_set = *FiftyOneDegrees::PatternV3c::String_value_set;
*swig_length_get = *FiftyOneDegrees::PatternV3c::String_length_get;
*swig_length_set = *FiftyOneDegrees::PatternV3c::String_length_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_String(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_String($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Strings ##############

package FiftyOneDegrees::PatternV3::Strings;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_firstString_get = *FiftyOneDegrees::PatternV3c::Strings_firstString_get;
*swig_firstString_set = *FiftyOneDegrees::PatternV3c::Strings_firstString_set;
*swig_count_get = *FiftyOneDegrees::PatternV3c::Strings_count_get;
*swig_count_set = *FiftyOneDegrees::PatternV3c::Strings_count_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Strings(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Strings($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Node ##############

package FiftyOneDegrees::PatternV3::Node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_position_get = *FiftyOneDegrees::PatternV3c::Node_position_get;
*swig_position_set = *FiftyOneDegrees::PatternV3c::Node_position_set;
*swig_nextCharacterPosition_get = *FiftyOneDegrees::PatternV3c::Node_nextCharacterPosition_get;
*swig_nextCharacterPosition_set = *FiftyOneDegrees::PatternV3c::Node_nextCharacterPosition_set;
*swig_parentOffset_get = *FiftyOneDegrees::PatternV3c::Node_parentOffset_get;
*swig_parentOffset_set = *FiftyOneDegrees::PatternV3c::Node_parentOffset_set;
*swig_characterStringOffset_get = *FiftyOneDegrees::PatternV3c::Node_characterStringOffset_get;
*swig_characterStringOffset_set = *FiftyOneDegrees::PatternV3c::Node_characterStringOffset_set;
*swig_childrenCount_get = *FiftyOneDegrees::PatternV3c::Node_childrenCount_get;
*swig_childrenCount_set = *FiftyOneDegrees::PatternV3c::Node_childrenCount_set;
*swig_numericChildrenCount_get = *FiftyOneDegrees::PatternV3c::Node_numericChildrenCount_get;
*swig_numericChildrenCount_set = *FiftyOneDegrees::PatternV3c::Node_numericChildrenCount_set;
*swig_signatureCount_get = *FiftyOneDegrees::PatternV3c::Node_signatureCount_get;
*swig_signatureCount_set = *FiftyOneDegrees::PatternV3c::Node_signatureCount_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Node(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::ProfileOffset ##############

package FiftyOneDegrees::PatternV3::ProfileOffset;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_profileId_get = *FiftyOneDegrees::PatternV3c::ProfileOffset_profileId_get;
*swig_profileId_set = *FiftyOneDegrees::PatternV3c::ProfileOffset_profileId_set;
*swig_offset_get = *FiftyOneDegrees::PatternV3c::ProfileOffset_offset_get;
*swig_offset_set = *FiftyOneDegrees::PatternV3c::ProfileOffset_offset_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_ProfileOffset(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_ProfileOffset($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Property ##############

package FiftyOneDegrees::PatternV3::Property;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_componentIndex_get = *FiftyOneDegrees::PatternV3c::Property_componentIndex_get;
*swig_componentIndex_set = *FiftyOneDegrees::PatternV3c::Property_componentIndex_set;
*swig_displayOrder_get = *FiftyOneDegrees::PatternV3c::Property_displayOrder_get;
*swig_displayOrder_set = *FiftyOneDegrees::PatternV3c::Property_displayOrder_set;
*swig_isMandatory_get = *FiftyOneDegrees::PatternV3c::Property_isMandatory_get;
*swig_isMandatory_set = *FiftyOneDegrees::PatternV3c::Property_isMandatory_set;
*swig_isList_get = *FiftyOneDegrees::PatternV3c::Property_isList_get;
*swig_isList_set = *FiftyOneDegrees::PatternV3c::Property_isList_set;
*swig_showValues_get = *FiftyOneDegrees::PatternV3c::Property_showValues_get;
*swig_showValues_set = *FiftyOneDegrees::PatternV3c::Property_showValues_set;
*swig_isObsolete_get = *FiftyOneDegrees::PatternV3c::Property_isObsolete_get;
*swig_isObsolete_set = *FiftyOneDegrees::PatternV3c::Property_isObsolete_set;
*swig_show_get = *FiftyOneDegrees::PatternV3c::Property_show_get;
*swig_show_set = *FiftyOneDegrees::PatternV3c::Property_show_set;
*swig_valueType_get = *FiftyOneDegrees::PatternV3c::Property_valueType_get;
*swig_valueType_set = *FiftyOneDegrees::PatternV3c::Property_valueType_set;
*swig_defaultValueIndex_get = *FiftyOneDegrees::PatternV3c::Property_defaultValueIndex_get;
*swig_defaultValueIndex_set = *FiftyOneDegrees::PatternV3c::Property_defaultValueIndex_set;
*swig_nameOffset_get = *FiftyOneDegrees::PatternV3c::Property_nameOffset_get;
*swig_nameOffset_set = *FiftyOneDegrees::PatternV3c::Property_nameOffset_set;
*swig_descriptionOffset_get = *FiftyOneDegrees::PatternV3c::Property_descriptionOffset_get;
*swig_descriptionOffset_set = *FiftyOneDegrees::PatternV3c::Property_descriptionOffset_set;
*swig_categoryOffset_get = *FiftyOneDegrees::PatternV3c::Property_categoryOffset_get;
*swig_categoryOffset_set = *FiftyOneDegrees::PatternV3c::Property_categoryOffset_set;
*swig_urlOffset_get = *FiftyOneDegrees::PatternV3c::Property_urlOffset_get;
*swig_urlOffset_set = *FiftyOneDegrees::PatternV3c::Property_urlOffset_set;
*swig_firstValueIndex_get = *FiftyOneDegrees::PatternV3c::Property_firstValueIndex_get;
*swig_firstValueIndex_set = *FiftyOneDegrees::PatternV3c::Property_firstValueIndex_set;
*swig_lastValueIndex_get = *FiftyOneDegrees::PatternV3c::Property_lastValueIndex_get;
*swig_lastValueIndex_set = *FiftyOneDegrees::PatternV3c::Property_lastValueIndex_set;
*swig_mapCount_get = *FiftyOneDegrees::PatternV3c::Property_mapCount_get;
*swig_mapCount_set = *FiftyOneDegrees::PatternV3c::Property_mapCount_set;
*swig_firstMapIndex_get = *FiftyOneDegrees::PatternV3c::Property_firstMapIndex_get;
*swig_firstMapIndex_set = *FiftyOneDegrees::PatternV3c::Property_firstMapIndex_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Property(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Property($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Value ##############

package FiftyOneDegrees::PatternV3::Value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_propertyIndex_get = *FiftyOneDegrees::PatternV3c::Value_propertyIndex_get;
*swig_propertyIndex_set = *FiftyOneDegrees::PatternV3c::Value_propertyIndex_set;
*swig_nameOffset_get = *FiftyOneDegrees::PatternV3c::Value_nameOffset_get;
*swig_nameOffset_set = *FiftyOneDegrees::PatternV3c::Value_nameOffset_set;
*swig_descriptionOffset_get = *FiftyOneDegrees::PatternV3c::Value_descriptionOffset_get;
*swig_descriptionOffset_set = *FiftyOneDegrees::PatternV3c::Value_descriptionOffset_set;
*swig_urlOffset_get = *FiftyOneDegrees::PatternV3c::Value_urlOffset_get;
*swig_urlOffset_set = *FiftyOneDegrees::PatternV3c::Value_urlOffset_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Profile ##############

package FiftyOneDegrees::PatternV3::Profile;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_componentIndex_get = *FiftyOneDegrees::PatternV3c::Profile_componentIndex_get;
*swig_componentIndex_set = *FiftyOneDegrees::PatternV3c::Profile_componentIndex_set;
*swig_profileId_get = *FiftyOneDegrees::PatternV3c::Profile_profileId_get;
*swig_profileId_set = *FiftyOneDegrees::PatternV3c::Profile_profileId_set;
*swig_valueCount_get = *FiftyOneDegrees::PatternV3c::Profile_valueCount_get;
*swig_valueCount_set = *FiftyOneDegrees::PatternV3c::Profile_valueCount_set;
*swig_signatureCount_get = *FiftyOneDegrees::PatternV3c::Profile_signatureCount_get;
*swig_signatureCount_set = *FiftyOneDegrees::PatternV3c::Profile_signatureCount_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Profile(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Profile($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Date ##############

package FiftyOneDegrees::PatternV3::Date;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_year_get = *FiftyOneDegrees::PatternV3c::Date_year_get;
*swig_year_set = *FiftyOneDegrees::PatternV3c::Date_year_set;
*swig_month_get = *FiftyOneDegrees::PatternV3c::Date_month_get;
*swig_month_set = *FiftyOneDegrees::PatternV3c::Date_month_set;
*swig_day_get = *FiftyOneDegrees::PatternV3c::Date_day_get;
*swig_day_set = *FiftyOneDegrees::PatternV3c::Date_day_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Date(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Date($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::EntityHeader ##############

package FiftyOneDegrees::PatternV3::EntityHeader;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_startPosition_get = *FiftyOneDegrees::PatternV3c::EntityHeader_startPosition_get;
*swig_startPosition_set = *FiftyOneDegrees::PatternV3c::EntityHeader_startPosition_set;
*swig_length_get = *FiftyOneDegrees::PatternV3c::EntityHeader_length_get;
*swig_length_set = *FiftyOneDegrees::PatternV3c::EntityHeader_length_set;
*swig_count_get = *FiftyOneDegrees::PatternV3c::EntityHeader_count_get;
*swig_count_set = *FiftyOneDegrees::PatternV3c::EntityHeader_count_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_EntityHeader(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_EntityHeader($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::NumericNodeState ##############

package FiftyOneDegrees::PatternV3::NumericNodeState;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_target_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_target_get;
*swig_target_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_target_set;
*swig_node_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_node_get;
*swig_node_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_node_set;
*swig_firstNodeNumericIndex_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_firstNodeNumericIndex_get;
*swig_firstNodeNumericIndex_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_firstNodeNumericIndex_set;
*swig_range_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_range_get;
*swig_range_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_range_set;
*swig_startIndex_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_startIndex_get;
*swig_startIndex_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_startIndex_set;
*swig_lowIndex_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_lowIndex_get;
*swig_lowIndex_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_lowIndex_set;
*swig_highIndex_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_highIndex_get;
*swig_highIndex_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_highIndex_set;
*swig_lowInRange_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_lowInRange_get;
*swig_lowInRange_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_lowInRange_set;
*swig_highInRange_get = *FiftyOneDegrees::PatternV3c::NumericNodeState_highInRange_get;
*swig_highInRange_set = *FiftyOneDegrees::PatternV3c::NumericNodeState_highInRange_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_NumericNodeState(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_NumericNodeState($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::DataSetHeader ##############

package FiftyOneDegrees::PatternV3::DataSetHeader;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_versionMajor_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionMajor_get;
*swig_versionMajor_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionMajor_set;
*swig_versionMinor_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionMinor_get;
*swig_versionMinor_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionMinor_set;
*swig_versionBuild_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionBuild_get;
*swig_versionBuild_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionBuild_set;
*swig_versionRevision_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionRevision_get;
*swig_versionRevision_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_versionRevision_set;
*swig_tag_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_tag_get;
*swig_tag_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_tag_set;
*swig_copyrightOffset_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_copyrightOffset_get;
*swig_copyrightOffset_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_copyrightOffset_set;
*swig_age_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_age_get;
*swig_age_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_age_set;
*swig_minUserAgentCount_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_minUserAgentCount_get;
*swig_minUserAgentCount_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_minUserAgentCount_set;
*swig_nameOffset_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_nameOffset_get;
*swig_nameOffset_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_nameOffset_set;
*swig_formatOffset_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_formatOffset_get;
*swig_formatOffset_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_formatOffset_set;
*swig_published_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_published_get;
*swig_published_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_published_set;
*swig_nextUpdate_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_nextUpdate_get;
*swig_nextUpdate_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_nextUpdate_set;
*swig_deviceCombinations_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_deviceCombinations_get;
*swig_deviceCombinations_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_deviceCombinations_set;
*swig_maxUserAgentLength_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxUserAgentLength_get;
*swig_maxUserAgentLength_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxUserAgentLength_set;
*swig_minUserAgentLength_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_minUserAgentLength_get;
*swig_minUserAgentLength_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_minUserAgentLength_set;
*swig_lowestCharacter_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_lowestCharacter_get;
*swig_lowestCharacter_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_lowestCharacter_set;
*swig_highestCharacter_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_highestCharacter_get;
*swig_highestCharacter_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_highestCharacter_set;
*swig_maxSignatures_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxSignatures_get;
*swig_maxSignatures_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxSignatures_set;
*swig_signatureProfilesCount_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_signatureProfilesCount_get;
*swig_signatureProfilesCount_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_signatureProfilesCount_set;
*swig_signatureNodesCount_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_signatureNodesCount_get;
*swig_signatureNodesCount_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_signatureNodesCount_set;
*swig_maxValues_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxValues_get;
*swig_maxValues_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxValues_set;
*swig_csvBufferLength_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_csvBufferLength_get;
*swig_csvBufferLength_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_csvBufferLength_set;
*swig_jsonBufferLength_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_jsonBufferLength_get;
*swig_jsonBufferLength_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_jsonBufferLength_set;
*swig_xmlBufferLength_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_xmlBufferLength_get;
*swig_xmlBufferLength_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_xmlBufferLength_set;
*swig_maxSignaturesClosest_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxSignaturesClosest_get;
*swig_maxSignaturesClosest_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_maxSignaturesClosest_set;
*swig_strings_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_strings_get;
*swig_strings_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_strings_set;
*swig_components_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_components_get;
*swig_components_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_components_set;
*swig_maps_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_maps_get;
*swig_maps_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_maps_set;
*swig_properties_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_properties_get;
*swig_properties_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_properties_set;
*swig_values_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_values_get;
*swig_values_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_values_set;
*swig_profiles_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_profiles_get;
*swig_profiles_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_profiles_set;
*swig_signatures_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_signatures_get;
*swig_signatures_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_signatures_set;
*swig_rankedSignatureIndexes_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_rankedSignatureIndexes_get;
*swig_rankedSignatureIndexes_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_rankedSignatureIndexes_set;
*swig_nodes_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_nodes_get;
*swig_nodes_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_nodes_set;
*swig_rootNodes_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_rootNodes_get;
*swig_rootNodes_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_rootNodes_set;
*swig_profileOffsets_get = *FiftyOneDegrees::PatternV3c::DataSetHeader_profileOffsets_get;
*swig_profileOffsets_set = *FiftyOneDegrees::PatternV3c::DataSetHeader_profileOffsets_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_DataSetHeader(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_DataSetHeader($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::DataSet ##############

package FiftyOneDegrees::PatternV3::DataSet;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_header_get = *FiftyOneDegrees::PatternV3c::DataSet_header_get;
*swig_header_set = *FiftyOneDegrees::PatternV3c::DataSet_header_set;
*swig_sizeOfSignature_get = *FiftyOneDegrees::PatternV3c::DataSet_sizeOfSignature_get;
*swig_sizeOfSignature_set = *FiftyOneDegrees::PatternV3c::DataSet_sizeOfSignature_set;
*swig_signatureStartOfNodes_get = *FiftyOneDegrees::PatternV3c::DataSet_signatureStartOfNodes_get;
*swig_signatureStartOfNodes_set = *FiftyOneDegrees::PatternV3c::DataSet_signatureStartOfNodes_set;
*swig_requiredProperties_get = *FiftyOneDegrees::PatternV3c::DataSet_requiredProperties_get;
*swig_requiredProperties_set = *FiftyOneDegrees::PatternV3c::DataSet_requiredProperties_set;
*swig_requiredPropertyCount_get = *FiftyOneDegrees::PatternV3c::DataSet_requiredPropertyCount_get;
*swig_requiredPropertyCount_set = *FiftyOneDegrees::PatternV3c::DataSet_requiredPropertyCount_set;
*swig_strings_get = *FiftyOneDegrees::PatternV3c::DataSet_strings_get;
*swig_strings_set = *FiftyOneDegrees::PatternV3c::DataSet_strings_set;
*swig_components_get = *FiftyOneDegrees::PatternV3c::DataSet_components_get;
*swig_components_set = *FiftyOneDegrees::PatternV3c::DataSet_components_set;
*swig_maps_get = *FiftyOneDegrees::PatternV3c::DataSet_maps_get;
*swig_maps_set = *FiftyOneDegrees::PatternV3c::DataSet_maps_set;
*swig_properties_get = *FiftyOneDegrees::PatternV3c::DataSet_properties_get;
*swig_properties_set = *FiftyOneDegrees::PatternV3c::DataSet_properties_set;
*swig_values_get = *FiftyOneDegrees::PatternV3c::DataSet_values_get;
*swig_values_set = *FiftyOneDegrees::PatternV3c::DataSet_values_set;
*swig_profiles_get = *FiftyOneDegrees::PatternV3c::DataSet_profiles_get;
*swig_profiles_set = *FiftyOneDegrees::PatternV3c::DataSet_profiles_set;
*swig_signatures_get = *FiftyOneDegrees::PatternV3c::DataSet_signatures_get;
*swig_signatures_set = *FiftyOneDegrees::PatternV3c::DataSet_signatures_set;
*swig_rankedSignatureIndexes_get = *FiftyOneDegrees::PatternV3c::DataSet_rankedSignatureIndexes_get;
*swig_rankedSignatureIndexes_set = *FiftyOneDegrees::PatternV3c::DataSet_rankedSignatureIndexes_set;
*swig_nodes_get = *FiftyOneDegrees::PatternV3c::DataSet_nodes_get;
*swig_nodes_set = *FiftyOneDegrees::PatternV3c::DataSet_nodes_set;
*swig_rootNodes_get = *FiftyOneDegrees::PatternV3c::DataSet_rootNodes_get;
*swig_rootNodes_set = *FiftyOneDegrees::PatternV3c::DataSet_rootNodes_set;
*swig_profileOffsets_get = *FiftyOneDegrees::PatternV3c::DataSet_profileOffsets_get;
*swig_profileOffsets_set = *FiftyOneDegrees::PatternV3c::DataSet_profileOffsets_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_DataSet(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_DataSet($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::LinkedSignatureListItem ##############

package FiftyOneDegrees::PatternV3::LinkedSignatureListItem;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_next_get;
*swig_next_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_next_set;
*swig_previous_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_previous_get;
*swig_previous_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_previous_set;
*swig_rankedSignatureIndex_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_rankedSignatureIndex_get;
*swig_rankedSignatureIndex_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_rankedSignatureIndex_set;
*swig_frequency_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_frequency_get;
*swig_frequency_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureListItem_frequency_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_LinkedSignatureListItem(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_LinkedSignatureListItem($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::LinkedSignatureList ##############

package FiftyOneDegrees::PatternV3::LinkedSignatureList;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_items_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_items_get;
*swig_items_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_items_set;
*swig_first_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_first_get;
*swig_first_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_first_set;
*swig_last_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_last_get;
*swig_last_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_last_set;
*swig_count_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_count_get;
*swig_count_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_count_set;
*swig_current_get = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_current_get;
*swig_current_set = *FiftyOneDegrees::PatternV3c::LinkedSignatureList_current_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_LinkedSignatureList(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_LinkedSignatureList($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FiftyOneDegrees::PatternV3::Workset ##############

package FiftyOneDegrees::PatternV3::Workset;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FiftyOneDegrees::PatternV3 );
%OWNER = ();
%ITERATORS = ();
*swig_dataSet_get = *FiftyOneDegrees::PatternV3c::Workset_dataSet_get;
*swig_dataSet_set = *FiftyOneDegrees::PatternV3c::Workset_dataSet_set;
*swig_input_get = *FiftyOneDegrees::PatternV3c::Workset_input_get;
*swig_input_set = *FiftyOneDegrees::PatternV3c::Workset_input_set;
*swig_targetUserAgent_get = *FiftyOneDegrees::PatternV3c::Workset_targetUserAgent_get;
*swig_targetUserAgent_set = *FiftyOneDegrees::PatternV3c::Workset_targetUserAgent_set;
*swig_targetUserAgentArray_get = *FiftyOneDegrees::PatternV3c::Workset_targetUserAgentArray_get;
*swig_targetUserAgentArray_set = *FiftyOneDegrees::PatternV3c::Workset_targetUserAgentArray_set;
*swig_targetUserAgentArrayLength_get = *FiftyOneDegrees::PatternV3c::Workset_targetUserAgentArrayLength_get;
*swig_targetUserAgentArrayLength_set = *FiftyOneDegrees::PatternV3c::Workset_targetUserAgentArrayLength_set;
*swig_relevantNodes_get = *FiftyOneDegrees::PatternV3c::Workset_relevantNodes_get;
*swig_relevantNodes_set = *FiftyOneDegrees::PatternV3c::Workset_relevantNodes_set;
*swig_closestNodes_get = *FiftyOneDegrees::PatternV3c::Workset_closestNodes_get;
*swig_closestNodes_set = *FiftyOneDegrees::PatternV3c::Workset_closestNodes_set;
*swig_profiles_get = *FiftyOneDegrees::PatternV3c::Workset_profiles_get;
*swig_profiles_set = *FiftyOneDegrees::PatternV3c::Workset_profiles_set;
*swig_profileCount_get = *FiftyOneDegrees::PatternV3c::Workset_profileCount_get;
*swig_profileCount_set = *FiftyOneDegrees::PatternV3c::Workset_profileCount_set;
*swig_nodes_get = *FiftyOneDegrees::PatternV3c::Workset_nodes_get;
*swig_nodes_set = *FiftyOneDegrees::PatternV3c::Workset_nodes_set;
*swig_orderedNodes_get = *FiftyOneDegrees::PatternV3c::Workset_orderedNodes_get;
*swig_orderedNodes_set = *FiftyOneDegrees::PatternV3c::Workset_orderedNodes_set;
*swig_nodeCount_get = *FiftyOneDegrees::PatternV3c::Workset_nodeCount_get;
*swig_nodeCount_set = *FiftyOneDegrees::PatternV3c::Workset_nodeCount_set;
*swig_closestNodeRankedSignatureIndex_get = *FiftyOneDegrees::PatternV3c::Workset_closestNodeRankedSignatureIndex_get;
*swig_closestNodeRankedSignatureIndex_set = *FiftyOneDegrees::PatternV3c::Workset_closestNodeRankedSignatureIndex_set;
*swig_linkedSignatureList_get = *FiftyOneDegrees::PatternV3c::Workset_linkedSignatureList_get;
*swig_linkedSignatureList_set = *FiftyOneDegrees::PatternV3c::Workset_linkedSignatureList_set;
*swig_signature_get = *FiftyOneDegrees::PatternV3c::Workset_signature_get;
*swig_signature_set = *FiftyOneDegrees::PatternV3c::Workset_signature_set;
*swig_signatureAsString_get = *FiftyOneDegrees::PatternV3c::Workset_signatureAsString_get;
*swig_signatureAsString_set = *FiftyOneDegrees::PatternV3c::Workset_signatureAsString_set;
*swig_nextCharacterPositionIndex_get = *FiftyOneDegrees::PatternV3c::Workset_nextCharacterPositionIndex_get;
*swig_nextCharacterPositionIndex_set = *FiftyOneDegrees::PatternV3c::Workset_nextCharacterPositionIndex_set;
*swig_method_get = *FiftyOneDegrees::PatternV3c::Workset_method_get;
*swig_method_set = *FiftyOneDegrees::PatternV3c::Workset_method_set;
*swig_difference_get = *FiftyOneDegrees::PatternV3c::Workset_difference_get;
*swig_difference_set = *FiftyOneDegrees::PatternV3c::Workset_difference_set;
*swig_rootNodesEvaluated_get = *FiftyOneDegrees::PatternV3c::Workset_rootNodesEvaluated_get;
*swig_rootNodesEvaluated_set = *FiftyOneDegrees::PatternV3c::Workset_rootNodesEvaluated_set;
*swig_stringsRead_get = *FiftyOneDegrees::PatternV3c::Workset_stringsRead_get;
*swig_stringsRead_set = *FiftyOneDegrees::PatternV3c::Workset_stringsRead_set;
*swig_nodesEvaluated_get = *FiftyOneDegrees::PatternV3c::Workset_nodesEvaluated_get;
*swig_nodesEvaluated_set = *FiftyOneDegrees::PatternV3c::Workset_nodesEvaluated_set;
*swig_signaturesCompared_get = *FiftyOneDegrees::PatternV3c::Workset_signaturesCompared_get;
*swig_signaturesCompared_set = *FiftyOneDegrees::PatternV3c::Workset_signaturesCompared_set;
*swig_signaturesRead_get = *FiftyOneDegrees::PatternV3c::Workset_signaturesRead_get;
*swig_signaturesRead_set = *FiftyOneDegrees::PatternV3c::Workset_signaturesRead_set;
*swig_closestSignatures_get = *FiftyOneDegrees::PatternV3c::Workset_closestSignatures_get;
*swig_closestSignatures_set = *FiftyOneDegrees::PatternV3c::Workset_closestSignatures_set;
*swig_values_get = *FiftyOneDegrees::PatternV3c::Workset_values_get;
*swig_values_set = *FiftyOneDegrees::PatternV3c::Workset_values_set;
*swig_valuesCount_get = *FiftyOneDegrees::PatternV3c::Workset_valuesCount_get;
*swig_valuesCount_set = *FiftyOneDegrees::PatternV3c::Workset_valuesCount_set;
*swig_startWithInitialScore_get = *FiftyOneDegrees::PatternV3c::Workset_startWithInitialScore_get;
*swig_startWithInitialScore_set = *FiftyOneDegrees::PatternV3c::Workset_startWithInitialScore_set;
*swig_functionPtrGetScore_get = *FiftyOneDegrees::PatternV3c::Workset_functionPtrGetScore_get;
*swig_functionPtrGetScore_set = *FiftyOneDegrees::PatternV3c::Workset_functionPtrGetScore_set;
*swig_functionPtrNextClosestSignature_get = *FiftyOneDegrees::PatternV3c::Workset_functionPtrNextClosestSignature_get;
*swig_functionPtrNextClosestSignature_set = *FiftyOneDegrees::PatternV3c::Workset_functionPtrNextClosestSignature_set;
sub new {
    my $pkg = shift;
    my $self = FiftyOneDegrees::PatternV3c::new_Workset(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FiftyOneDegrees::PatternV3c::delete_Workset($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package FiftyOneDegrees::PatternV3;

*NONE = *FiftyOneDegrees::PatternV3c::NONE;
*EXACT = *FiftyOneDegrees::PatternV3c::EXACT;
*NUMERIC = *FiftyOneDegrees::PatternV3c::NUMERIC;
*NEAREST = *FiftyOneDegrees::PatternV3c::NEAREST;
*CLOSEST = *FiftyOneDegrees::PatternV3c::CLOSEST;
*DATA_SET_INIT_STATUS_SUCCESS = *FiftyOneDegrees::PatternV3c::DATA_SET_INIT_STATUS_SUCCESS;
*DATA_SET_INIT_STATUS_INSUFFICIENT_MEMORY = *FiftyOneDegrees::PatternV3c::DATA_SET_INIT_STATUS_INSUFFICIENT_MEMORY;
*DATA_SET_INIT_STATUS_CORRUPT_DATA = *FiftyOneDegrees::PatternV3c::DATA_SET_INIT_STATUS_CORRUPT_DATA;
*DATA_SET_INIT_STATUS_INCORRECT_VERSION = *FiftyOneDegrees::PatternV3c::DATA_SET_INIT_STATUS_INCORRECT_VERSION;
*DATA_SET_INIT_STATUS_FILE_NOT_FOUND = *FiftyOneDegrees::PatternV3c::DATA_SET_INIT_STATUS_FILE_NOT_FOUND;
1;
