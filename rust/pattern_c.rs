/* automatically generated by rust-bindgen */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101406;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = u32;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
pub type byte = ::std::os::raw::c_uchar;
pub const e_fiftyoneDegrees_MatchMethod_NONE: e_fiftyoneDegrees_MatchMethod = 0;
pub const e_fiftyoneDegrees_MatchMethod_EXACT: e_fiftyoneDegrees_MatchMethod = 1;
pub const e_fiftyoneDegrees_MatchMethod_NUMERIC: e_fiftyoneDegrees_MatchMethod = 2;
pub const e_fiftyoneDegrees_MatchMethod_NEAREST: e_fiftyoneDegrees_MatchMethod = 3;
pub const e_fiftyoneDegrees_MatchMethod_CLOSEST: e_fiftyoneDegrees_MatchMethod = 4;
pub type e_fiftyoneDegrees_MatchMethod = u32;
pub use self::e_fiftyoneDegrees_MatchMethod as fiftyoneDegreesMatchMethod;
pub const e_fiftyoneDegrees_Resultset_CacheState_ACTIVE_CACHE_LIST_ONLY:
    e_fiftyoneDegrees_Resultset_CacheState = 0;
pub const e_fiftyoneDegrees_Resultset_CacheState_BOTH_CACHE_LISTS:
    e_fiftyoneDegrees_Resultset_CacheState = 1;
pub type e_fiftyoneDegrees_Resultset_CacheState = u32;
pub use self::e_fiftyoneDegrees_Resultset_CacheState as fiftyoneDegreesResultsetCacheState;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_SUCCESS:
    e_fiftyoneDegrees_DataSetInitStatus = 0;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_INSUFFICIENT_MEMORY:
    e_fiftyoneDegrees_DataSetInitStatus = 1;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_CORRUPT_DATA:
    e_fiftyoneDegrees_DataSetInitStatus = 2;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_INCORRECT_VERSION:
    e_fiftyoneDegrees_DataSetInitStatus = 3;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_FILE_NOT_FOUND:
    e_fiftyoneDegrees_DataSetInitStatus = 4;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_NOT_SET:
    e_fiftyoneDegrees_DataSetInitStatus = 5;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_POINTER_OUT_OF_BOUNDS:
    e_fiftyoneDegrees_DataSetInitStatus = 6;
pub const e_fiftyoneDegrees_DataSetInitStatus_DATA_SET_INIT_STATUS_NULL_POINTER:
    e_fiftyoneDegrees_DataSetInitStatus = 7;
pub type e_fiftyoneDegrees_DataSetInitStatus = u32;
pub use self::e_fiftyoneDegrees_DataSetInitStatus as fiftyoneDegreesDataSetInitStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegreesRange_t {
    pub lower: i16,
    pub upper: i16,
}
#[test]
fn bindgen_test_layout_fiftyoneDegreesRange_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegreesRange_t>(),
        4usize,
        concat!("Size of: ", stringify!(fiftyoneDegreesRange_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegreesRange_t>(),
        2usize,
        concat!("Alignment of ", stringify!(fiftyoneDegreesRange_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegreesRange_t>())).lower as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegreesRange_t),
            "::",
            stringify!(lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegreesRange_t>())).upper as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegreesRange_t),
            "::",
            stringify!(upper)
        )
    );
}
pub type fiftyoneDegreesRange = fiftyoneDegreesRange_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_ascii_string_t {
    pub length: usize,
    pub firstByte: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_ascii_string_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_ascii_string_t>(),
        3usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_ascii_string_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_ascii_string_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_ascii_string_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_ascii_string_t>())).length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_ascii_string_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_ascii_string_t>())).firstByte as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_ascii_string_t),
            "::",
            stringify!(firstByte)
        )
    );
}
pub type fiftyoneDegreesAsciiString = fiftyoneDegrees_ascii_string_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_component_t {
    pub componentId: byte,
    pub nameOffset: i32,
    pub defaultProfileOffset: i32,
    pub httpHeaderCount: u16,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_component_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_component_t>(),
        11usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_component_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_component_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_component_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_component_t>())).componentId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_component_t),
            "::",
            stringify!(componentId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_component_t>())).nameOffset as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_component_t),
            "::",
            stringify!(nameOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_component_t>())).defaultProfileOffset as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_component_t),
            "::",
            stringify!(defaultProfileOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_component_t>())).httpHeaderCount as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_component_t),
            "::",
            stringify!(httpHeaderCount)
        )
    );
}
pub type fiftyoneDegreesComponent = fiftyoneDegrees_component_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_map_t {
    pub nameOffset: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_map_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_map_t>(),
        4usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_map_t>(),
        4usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_map_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_map_t>())).nameOffset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_map_t),
            "::",
            stringify!(nameOffset)
        )
    );
}
pub type fiftyoneDegreesMap = fiftyoneDegrees_map_t;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_node_numeric_index_t {
    pub value: i16,
    pub relatedNodeOffset: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_node_numeric_index_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_node_numeric_index_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_node_numeric_index_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_node_numeric_index_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_node_numeric_index_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_numeric_index_t>())).value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_numeric_index_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_numeric_index_t>())).relatedNodeOffset
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_numeric_index_t),
            "::",
            stringify!(relatedNodeOffset)
        )
    );
}
pub type fiftyoneDegreesNodeNumericIndex = fiftyoneDegrees_node_numeric_index_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union fiftyoneDegrees_node_index_value_t {
    pub characters: [byte; 4usize],
    pub integer: i32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_node_index_value_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_node_index_value_t>(),
        4usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_node_index_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_node_index_value_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_node_index_value_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_index_value_t>())).characters as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_index_value_t),
            "::",
            stringify!(characters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_index_value_t>())).integer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_index_value_t),
            "::",
            stringify!(integer)
        )
    );
}
pub type fiftyoneDegreesNodeIndexValue = fiftyoneDegrees_node_index_value_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct fiftyoneDegrees_node_index_t {
    pub relatedNodeOffset: i32,
    pub value: fiftyoneDegrees_node_index_t__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union fiftyoneDegrees_node_index_t__bindgen_ty_1 {
    pub characters: [byte; 4usize],
    pub integer: i32,
    _bindgen_union_align: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_node_index_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_node_index_t__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_node_index_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_node_index_t__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_node_index_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_index_t__bindgen_ty_1>())).characters
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_index_t__bindgen_ty_1),
            "::",
            stringify!(characters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_index_t__bindgen_ty_1>())).integer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_index_t__bindgen_ty_1),
            "::",
            stringify!(integer)
        )
    );
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_node_index_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_node_index_t>(),
        8usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_node_index_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_node_index_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_node_index_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_index_t>())).relatedNodeOffset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_index_t),
            "::",
            stringify!(relatedNodeOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_index_t>())).value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_index_t),
            "::",
            stringify!(value)
        )
    );
}
pub type fiftyoneDegreesNodeIndex = fiftyoneDegrees_node_index_t;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_string_t {
    pub value: *mut byte,
    pub length: i16,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_string_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_string_t>(),
        10usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_string_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_string_t>(),
        2usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_string_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_string_t>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_string_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_string_t>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_string_t),
            "::",
            stringify!(length)
        )
    );
}
pub type fiftyoneDegreesString = fiftyoneDegrees_string_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_strings_t {
    pub firstString: *const fiftyoneDegreesString,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_strings_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_strings_t>(),
        16usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_strings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_strings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_strings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_strings_t>())).firstString as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_strings_t),
            "::",
            stringify!(firstString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_strings_t>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_strings_t),
            "::",
            stringify!(count)
        )
    );
}
pub type fiftyoneDegreesStrings = fiftyoneDegrees_strings_t;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_node_t {
    pub position: i16,
    pub nextCharacterPosition: i16,
    pub parentOffset: i32,
    pub characterStringOffset: i32,
    pub childrenCount: i16,
    pub numericChildrenCount: i16,
    pub signatureCount: u16,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_node_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_node_t>(),
        18usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_node_t>(),
        2usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_node_t>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_t),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_t>())).nextCharacterPosition as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_t),
            "::",
            stringify!(nextCharacterPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_t>())).parentOffset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_t),
            "::",
            stringify!(parentOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_t>())).characterStringOffset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_t),
            "::",
            stringify!(characterStringOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_t>())).childrenCount as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_t),
            "::",
            stringify!(childrenCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_t>())).numericChildrenCount as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_t),
            "::",
            stringify!(numericChildrenCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_node_t>())).signatureCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_node_t),
            "::",
            stringify!(signatureCount)
        )
    );
}
pub type fiftyoneDegreesNode = fiftyoneDegrees_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_profile_offset_t {
    pub profileId: i32,
    pub offset: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_profile_offset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_profile_offset_t>(),
        8usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_profile_offset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_profile_offset_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_profile_offset_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_offset_t>())).profileId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_offset_t),
            "::",
            stringify!(profileId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_offset_t>())).offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_offset_t),
            "::",
            stringify!(offset)
        )
    );
}
pub type fiftyoneDegreesProfileOffset = fiftyoneDegrees_profile_offset_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct property_t {
    pub componentIndex: byte,
    pub displayOrder: byte,
    pub isMandatory: byte,
    pub isList: byte,
    pub showValues: byte,
    pub isObsolete: byte,
    pub show: byte,
    pub valueType: byte,
    pub defaultValueIndex: i32,
    pub nameOffset: i32,
    pub descriptionOffset: i32,
    pub categoryOffset: i32,
    pub urlOffset: i32,
    pub firstValueIndex: i32,
    pub lastValueIndex: i32,
    pub mapCount: i32,
    pub firstMapIndex: i32,
}
#[test]
fn bindgen_test_layout_property_t() {
    assert_eq!(
        ::std::mem::size_of::<property_t>(),
        44usize,
        concat!("Size of: ", stringify!(property_t))
    );
    assert_eq!(
        ::std::mem::align_of::<property_t>(),
        1usize,
        concat!("Alignment of ", stringify!(property_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).componentIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(componentIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).displayOrder as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(displayOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).isMandatory as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(isMandatory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).isList as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(isList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).showValues as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(showValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).isObsolete as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(isObsolete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).show as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(show)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).valueType as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(valueType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).defaultValueIndex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(defaultValueIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).nameOffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(nameOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).descriptionOffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(descriptionOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).categoryOffset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(categoryOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).urlOffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(urlOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).firstValueIndex as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(firstValueIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).lastValueIndex as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(lastValueIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).mapCount as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(mapCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<property_t>())).firstMapIndex as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(property_t),
            "::",
            stringify!(firstMapIndex)
        )
    );
}
pub type fiftyoneDegreesProperty = property_t;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_value_t {
    pub propertyIndex: i16,
    pub nameOffset: i32,
    pub descriptionOffset: i32,
    pub urlOffset: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_value_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_value_t>(),
        14usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_value_t>(),
        2usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_value_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_value_t>())).propertyIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_value_t),
            "::",
            stringify!(propertyIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_value_t>())).nameOffset as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_value_t),
            "::",
            stringify!(nameOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_value_t>())).descriptionOffset as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_value_t),
            "::",
            stringify!(descriptionOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_value_t>())).urlOffset as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_value_t),
            "::",
            stringify!(urlOffset)
        )
    );
}
pub type fiftyoneDegreesValue = fiftyoneDegrees_value_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_profile_t {
    pub componentIndex: byte,
    pub profileId: i32,
    pub valueCount: i32,
    pub signatureCount: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_profile_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_profile_t>(),
        13usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_profile_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_profile_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_profile_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_t>())).componentIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_t),
            "::",
            stringify!(componentIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_t>())).profileId as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_t),
            "::",
            stringify!(profileId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_t>())).valueCount as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_t),
            "::",
            stringify!(valueCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_t>())).signatureCount as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_t),
            "::",
            stringify!(signatureCount)
        )
    );
}
pub type fiftyoneDegreesProfile = fiftyoneDegrees_profile_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_date_t {
    pub year: i16,
    pub month: byte,
    pub day: byte,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_date_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_date_t>(),
        4usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_date_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_date_t>(),
        2usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_date_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_date_t>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_date_t),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_date_t>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_date_t),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_date_t>())).day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_date_t),
            "::",
            stringify!(day)
        )
    );
}
pub type fiftyoneDegreesDate = fiftyoneDegrees_date_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_entity_header_t {
    pub startPosition: i32,
    pub length: i32,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_entity_header_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_entity_header_t>(),
        12usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_entity_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_entity_header_t>(),
        4usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_entity_header_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_entity_header_t>())).startPosition as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_entity_header_t),
            "::",
            stringify!(startPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_entity_header_t>())).length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_entity_header_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_entity_header_t>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_entity_header_t),
            "::",
            stringify!(count)
        )
    );
}
pub type fiftyoneDegreesEntityHeader = fiftyoneDegrees_entity_header_t;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_numeric_node_state {
    pub target: i32,
    pub node: *const fiftyoneDegreesNode,
    pub firstNodeNumericIndex: *const fiftyoneDegreesNodeNumericIndex,
    pub range: *const fiftyoneDegreesRange,
    pub startIndex: i32,
    pub lowIndex: i32,
    pub highIndex: i32,
    pub lowInRange: byte,
    pub highInRange: byte,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_numeric_node_state() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_numeric_node_state>(),
        42usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_numeric_node_state))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_numeric_node_state>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_numeric_node_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).target as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).node as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).firstNodeNumericIndex
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(firstNodeNumericIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).range as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).startIndex as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(startIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).lowIndex as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(lowIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).highIndex as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(highIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).lowInRange as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(lowInRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_numeric_node_state>())).highInRange as *const _
                as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_numeric_node_state),
            "::",
            stringify!(highInRange)
        )
    );
}
pub type fiftyoneDegreesNumericNodeState = fiftyoneDegrees_numeric_node_state;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_dataset_header_t {
    pub versionMajor: i32,
    pub versionMinor: i32,
    pub versionBuild: i32,
    pub versionRevision: i32,
    pub tag: [byte; 16usize],
    pub exportTag: [byte; 16usize],
    pub copyrightOffset: i32,
    pub age: i16,
    pub minUserAgentCount: i32,
    pub nameOffset: i32,
    pub formatOffset: i32,
    pub published: fiftyoneDegreesDate,
    pub nextUpdate: fiftyoneDegreesDate,
    pub deviceCombinations: i32,
    pub maxUserAgentLength: i16,
    pub minUserAgentLength: i16,
    pub lowestCharacter: ::std::os::raw::c_char,
    pub highestCharacter: ::std::os::raw::c_char,
    pub maxSignatures: i32,
    pub signatureProfilesCount: i32,
    pub signatureNodesCount: i32,
    pub maxValues: i16,
    pub csvBufferLength: i32,
    pub jsonBufferLength: i32,
    pub xmlBufferLength: i32,
    pub maxSignaturesClosest: i32,
    pub maxRank: i32,
    pub strings: fiftyoneDegreesEntityHeader,
    pub components: fiftyoneDegreesEntityHeader,
    pub maps: fiftyoneDegreesEntityHeader,
    pub properties: fiftyoneDegreesEntityHeader,
    pub values: fiftyoneDegreesEntityHeader,
    pub profiles: fiftyoneDegreesEntityHeader,
    pub signatures: fiftyoneDegreesEntityHeader,
    pub signatureNodeOffsets: fiftyoneDegreesEntityHeader,
    pub nodeRankedSignatureIndexes: fiftyoneDegreesEntityHeader,
    pub rankedSignatureIndexes: fiftyoneDegreesEntityHeader,
    pub nodes: fiftyoneDegreesEntityHeader,
    pub rootNodes: fiftyoneDegreesEntityHeader,
    pub profileOffsets: fiftyoneDegreesEntityHeader,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_dataset_header_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_dataset_header_t>(),
        274usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_dataset_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_dataset_header_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_dataset_header_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).versionMajor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(versionMajor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).versionMinor as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(versionMinor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).versionBuild as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(versionBuild)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).versionRevision as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(versionRevision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).tag as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).exportTag as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(exportTag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).copyrightOffset as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(copyrightOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).age as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(age)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).minUserAgentCount
                as *const _ as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(minUserAgentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).nameOffset as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(nameOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).formatOffset as *const _
                as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(formatOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).published as *const _
                as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(published)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).nextUpdate as *const _
                as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(nextUpdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).deviceCombinations
                as *const _ as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(deviceCombinations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).maxUserAgentLength
                as *const _ as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(maxUserAgentLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).minUserAgentLength
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(minUserAgentLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).lowestCharacter as *const _
                as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(lowestCharacter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).highestCharacter
                as *const _ as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(highestCharacter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).maxSignatures as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(maxSignatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).signatureProfilesCount
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(signatureProfilesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).signatureNodesCount
                as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(signatureNodesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).maxValues as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(maxValues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).csvBufferLength as *const _
                as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(csvBufferLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).jsonBufferLength
                as *const _ as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(jsonBufferLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).xmlBufferLength as *const _
                as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(xmlBufferLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).maxSignaturesClosest
                as *const _ as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(maxSignaturesClosest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).maxRank as *const _
                as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(maxRank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).strings as *const _
                as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).components as *const _
                as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).maps as *const _ as usize
        },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).properties as *const _
                as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).values as *const _ as usize
        },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).profiles as *const _
                as usize
        },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).signatures as *const _
                as usize
        },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(signatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).signatureNodeOffsets
                as *const _ as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(signatureNodeOffsets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).nodeRankedSignatureIndexes
                as *const _ as usize
        },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(nodeRankedSignatureIndexes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).rankedSignatureIndexes
                as *const _ as usize
        },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(rankedSignatureIndexes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).nodes as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).rootNodes as *const _
                as usize
        },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(rootNodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).profileOffsets as *const _
                as usize
        },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(profileOffsets)
        )
    );
}
pub type fiftyoneDegreesDataSetHeader = fiftyoneDegrees_dataset_header_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_signature_t {
    pub nodeCount: byte,
    pub firstNodeOffsetIndex: i32,
    pub rank: i32,
    pub flags: byte,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_signature_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_signature_t>(),
        10usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_signature_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_signature_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_signature_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_t>())).nodeCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_t),
            "::",
            stringify!(nodeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_t>())).firstNodeOffsetIndex as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_t),
            "::",
            stringify!(firstNodeOffsetIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_t>())).rank as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_t),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_t>())).flags as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_t),
            "::",
            stringify!(flags)
        )
    );
}
pub type fiftyoneDegreesSignature = fiftyoneDegrees_signature_t;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_http_header_t {
    pub headerNameOffset: i32,
    pub headerName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_http_header_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_http_header_t>(),
        12usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_http_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_http_header_t>(),
        4usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_http_header_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_http_header_t>())).headerNameOffset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_http_header_t),
            "::",
            stringify!(headerNameOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_http_header_t>())).headerName as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_http_header_t),
            "::",
            stringify!(headerName)
        )
    );
}
pub type fiftyoneDegreesHttpHeader = fiftyoneDegrees_http_header_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_profile_struct_t {
    pub count: i32,
    pub profiles: *mut *mut fiftyoneDegreesProfile,
    pub indexes: *mut i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_profile_struct_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_profile_struct_t>(),
        24usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_profile_struct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_profile_struct_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_profile_struct_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_struct_t>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_struct_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_struct_t>())).profiles as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_struct_t),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_struct_t>())).indexes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_struct_t),
            "::",
            stringify!(indexes)
        )
    );
}
pub type fiftyoneDegreesProfilesStruct = fiftyoneDegrees_profile_struct_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_profile_index_struct_t {
    pub count: i32,
    pub indexes: *mut i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_profile_index_struct_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_profile_index_struct_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_profile_index_struct_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_profile_index_struct_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_profile_index_struct_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_index_struct_t>())).count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_index_struct_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_index_struct_t>())).indexes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_index_struct_t),
            "::",
            stringify!(indexes)
        )
    );
}
pub type fiftyoneDegreesProfileIndexesStruct = fiftyoneDegrees_profile_index_struct_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_profile_struct_array_t {
    pub initialised: i32,
    pub profilesStructs: *mut fiftyoneDegreesProfileIndexesStruct,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_profile_struct_array_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_profile_struct_array_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_profile_struct_array_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_profile_struct_array_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_profile_struct_array_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_struct_array_t>())).initialised
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_struct_array_t),
            "::",
            stringify!(initialised)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_profile_struct_array_t>())).profilesStructs
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_profile_struct_array_t),
            "::",
            stringify!(profilesStructs)
        )
    );
}
pub type fiftyoneDegreesProfilesStructArray = fiftyoneDegrees_profile_struct_array_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_dataset_t {
    pub header: fiftyoneDegreesDataSetHeader,
    pub memoryToFree: *const ::std::os::raw::c_void,
    pub sizeOfSignature: i32,
    pub signatureStartOfStruct: i32,
    pub requiredProperties: *mut *const fiftyoneDegreesProperty,
    pub requiredPropertyCount: i32,
    pub strings: *const byte,
    pub componentsData: *const byte,
    pub components: *mut *const fiftyoneDegreesComponent,
    pub maps: *const fiftyoneDegreesMap,
    pub properties: *const fiftyoneDegreesProperty,
    pub values: *const fiftyoneDegreesValue,
    pub profiles: *const byte,
    pub signatures: *const byte,
    pub signatureNodeOffsets: *const i32,
    pub nodeRankedSignatureIndexes: *const i32,
    pub rankedSignatureIndexes: *const i32,
    pub nodes: *const byte,
    pub rootNodes: *mut *const fiftyoneDegreesNode,
    pub profileOffsets: *const fiftyoneDegreesProfileOffset,
    pub httpHeadersCount: i32,
    pub httpHeaders: *mut fiftyoneDegreesHttpHeader,
    pub prefixedUpperHttpHeaders: *mut *const ::std::os::raw::c_char,
    pub valuePointersArray: *mut fiftyoneDegreesProfilesStructArray,
    pub maxPropertyValueLength: *mut i32,
    pub fileName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_dataset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_dataset_t>(),
        458usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_dataset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_dataset_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_dataset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).memoryToFree as *const _ as usize
        },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(memoryToFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).sizeOfSignature as *const _
                as usize
        },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(sizeOfSignature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).signatureStartOfStruct as *const _
                as usize
        },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(signatureStartOfStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).requiredProperties as *const _
                as usize
        },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(requiredProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).requiredPropertyCount as *const _
                as usize
        },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(requiredPropertyCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).strings as *const _ as usize
        },
        302usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).componentsData as *const _
                as usize
        },
        310usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(componentsData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).components as *const _ as usize
        },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).maps as *const _ as usize },
        326usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).properties as *const _ as usize
        },
        334usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).values as *const _ as usize
        },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).profiles as *const _ as usize
        },
        350usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).signatures as *const _ as usize
        },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(signatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).signatureNodeOffsets as *const _
                as usize
        },
        366usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(signatureNodeOffsets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).nodeRankedSignatureIndexes
                as *const _ as usize
        },
        374usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(nodeRankedSignatureIndexes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).rankedSignatureIndexes as *const _
                as usize
        },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(rankedSignatureIndexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).nodes as *const _ as usize },
        390usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).rootNodes as *const _ as usize
        },
        398usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(rootNodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).profileOffsets as *const _
                as usize
        },
        406usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(profileOffsets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).httpHeadersCount as *const _
                as usize
        },
        414usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(httpHeadersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).httpHeaders as *const _ as usize
        },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(httpHeaders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).prefixedUpperHttpHeaders
                as *const _ as usize
        },
        426usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(prefixedUpperHttpHeaders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).valuePointersArray as *const _
                as usize
        },
        434usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(valuePointersArray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).maxPropertyValueLength as *const _
                as usize
        },
        442usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(maxPropertyValueLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).fileName as *const _ as usize
        },
        450usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(fileName)
        )
    );
}
pub type fiftyoneDegreesDataSet = fiftyoneDegrees_dataset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_linked_signature_list_item_t {
    pub next: *mut fiftyoneDegrees_linked_signature_list_item_t,
    pub previous: *mut fiftyoneDegrees_linked_signature_list_item_t,
    pub rankedSignatureIndex: i32,
    pub frequency: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_linked_signature_list_item_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_linked_signature_list_item_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_linked_signature_list_item_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_linked_signature_list_item_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_linked_signature_list_item_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_item_t>())).next
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_item_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_item_t>())).previous
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_item_t),
            "::",
            stringify!(previous)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_item_t>()))
                .rankedSignatureIndex as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_item_t),
            "::",
            stringify!(rankedSignatureIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_item_t>())).frequency
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_item_t),
            "::",
            stringify!(frequency)
        )
    );
}
pub type fiftyoneDegreesLinkedSignatureListItem = fiftyoneDegrees_linked_signature_list_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_linked_signature_list_t {
    pub items: *const fiftyoneDegreesLinkedSignatureListItem,
    pub first: *mut fiftyoneDegreesLinkedSignatureListItem,
    pub last: *mut fiftyoneDegreesLinkedSignatureListItem,
    pub count: i32,
    pub current: *mut fiftyoneDegreesLinkedSignatureListItem,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_linked_signature_list_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_linked_signature_list_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_linked_signature_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_linked_signature_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_linked_signature_list_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_t>())).items as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_t),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_t>())).first as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_t),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_t>())).last as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_t>())).count as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_linked_signature_list_t>())).current as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_linked_signature_list_t),
            "::",
            stringify!(current)
        )
    );
}
pub type fiftyoneDegreesLinkedSignatureList = fiftyoneDegrees_linked_signature_list_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_resultset_t {
    pub dataSet: *const fiftyoneDegreesDataSet,
    pub targetUserAgentArray: *mut byte,
    pub targetUserAgentArrayLength: u16,
    pub targetUserAgentHashCode: u64,
    pub hashCodeSet: byte,
    pub method: fiftyoneDegreesMatchMethod,
    pub difference: i32,
    pub rootNodesEvaluated: i32,
    pub stringsRead: i32,
    pub nodesEvaluated: i32,
    pub signaturesCompared: i32,
    pub signaturesRead: i32,
    pub closestSignatures: i32,
    pub profiles: *mut *const fiftyoneDegreesProfile,
    pub profileCount: i32,
    pub signature: *mut byte,
    pub cache: *const fiftyoneDegrees_resultset_cache_t,
    pub listPrevious: *mut fiftyoneDegrees_resultset_t,
    pub listNext: *mut fiftyoneDegrees_resultset_t,
    pub treeParent: *mut fiftyoneDegrees_resultset_t,
    pub treeLeft: *mut fiftyoneDegrees_resultset_t,
    pub treeRight: *mut fiftyoneDegrees_resultset_t,
    pub colour: byte,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_resultset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_resultset_t>(),
        128usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_resultset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_resultset_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_resultset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).dataSet as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(dataSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).targetUserAgentArray as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(targetUserAgentArray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).targetUserAgentArrayLength
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(targetUserAgentArrayLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).targetUserAgentHashCode
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(targetUserAgentHashCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).hashCodeSet as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(hashCodeSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).method as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).difference as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(difference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).rootNodesEvaluated as *const _
                as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(rootNodesEvaluated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).stringsRead as *const _ as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(stringsRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).nodesEvaluated as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(nodesEvaluated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).signaturesCompared as *const _
                as usize
        },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(signaturesCompared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).signaturesRead as *const _
                as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(signaturesRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).closestSignatures as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(closestSignatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).profiles as *const _ as usize
        },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).profileCount as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(profileCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).signature as *const _ as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).cache as *const _ as usize
        },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).listPrevious as *const _
                as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(listPrevious)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).listNext as *const _ as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(listNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).treeParent as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(treeParent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).treeLeft as *const _ as usize
        },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(treeLeft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).treeRight as *const _ as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(treeRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_t>())).colour as *const _ as usize
        },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_t),
            "::",
            stringify!(colour)
        )
    );
}
pub type fiftyoneDegreesResultset = fiftyoneDegrees_resultset_t;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_resultset_cache_t {
    pub dataSet: *const fiftyoneDegreesDataSet,
    pub resultSets: *const fiftyoneDegreesResultset,
    pub targetUserAgentArrays: *const byte,
    pub profiles: *mut *const fiftyoneDegreesProfile,
    pub listFirst: *mut fiftyoneDegreesResultset,
    pub listLast: *mut fiftyoneDegreesResultset,
    pub root: fiftyoneDegreesResultset,
    pub empty: fiftyoneDegreesResultset,
    pub total: i32,
    pub allocated: i32,
    pub hits: i32,
    pub misses: i32,
    pub switches: i32,
    pub maxIterations: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_resultset_cache_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_resultset_cache_t>(),
        328usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_resultset_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_resultset_cache_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_resultset_cache_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).dataSet as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(dataSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).resultSets as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(resultSets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).targetUserAgentArrays
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(targetUserAgentArrays)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).profiles as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).listFirst as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(listFirst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).listLast as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(listLast)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).root as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).empty as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(empty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).total as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).allocated as *const _
                as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(allocated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).hits as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).misses as *const _
                as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(misses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).switches as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_resultset_cache_t>())).maxIterations as *const _
                as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_resultset_cache_t),
            "::",
            stringify!(maxIterations)
        )
    );
}
pub type fiftyoneDegreesResultsetCache = fiftyoneDegrees_resultset_cache_t;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_http_header_workset_t {
    pub header: *mut fiftyoneDegreesHttpHeader,
    pub headerValue: *const ::std::os::raw::c_char,
    pub headerValueLength: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_http_header_workset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_http_header_workset_t>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_http_header_workset_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_http_header_workset_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_http_header_workset_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_http_header_workset_t>())).header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_http_header_workset_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_http_header_workset_t>())).headerValue
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_http_header_workset_t),
            "::",
            stringify!(headerValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_http_header_workset_t>())).headerValueLength
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_http_header_workset_t),
            "::",
            stringify!(headerValueLength)
        )
    );
}
pub type fiftyoneDegreesHttpHeaderWorkset = fiftyoneDegrees_http_header_workset_t;
pub type fiftyoneDegreesWorksetPool = fiftyoneDegrees_workset_pool_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_workset_t {
    pub dataSet: *const fiftyoneDegreesDataSet,
    pub targetUserAgentArray: *mut byte,
    pub targetUserAgentArrayLength: u16,
    pub targetUserAgentHashCode: u64,
    pub hashCodeSet: byte,
    pub method: fiftyoneDegreesMatchMethod,
    pub difference: i32,
    pub rootNodesEvaluated: i32,
    pub stringsRead: i32,
    pub nodesEvaluated: i32,
    pub signaturesCompared: i32,
    pub signaturesRead: i32,
    pub closestSignatures: i32,
    pub profiles: *mut *const fiftyoneDegreesProfile,
    pub profileCount: i32,
    pub signature: *mut byte,
    pub cache: *const fiftyoneDegrees_resultset_cache_t,
    pub values: *mut *const fiftyoneDegreesValue,
    pub valuesCount: i32,
    pub input: *mut ::std::os::raw::c_char,
    pub targetUserAgent: *mut ::std::os::raw::c_char,
    pub relevantNodes: *mut ::std::os::raw::c_char,
    pub closestNodes: *mut ::std::os::raw::c_char,
    pub signatureAsString: *mut ::std::os::raw::c_char,
    pub tempheaderlowercase: *mut ::std::os::raw::c_char,
    pub nodes: *mut *const fiftyoneDegreesNode,
    pub orderedNodes: *mut *const fiftyoneDegreesNode,
    pub nodeCount: i32,
    pub closestNodeRankedSignatureIndex: i32,
    pub linkedSignatureList: fiftyoneDegreesLinkedSignatureList,
    pub nextCharacterPositionIndex: i16,
    pub startWithInitialScore: byte,
    pub functionPtrGetScore: ::std::option::Option<
        unsafe extern "C" fn(
            ws: *mut fiftyoneDegrees_workset_t,
            node: *const fiftyoneDegreesNode,
        ) -> ::std::os::raw::c_int,
    >,
    pub functionPtrNextClosestSignature: ::std::option::Option<
        unsafe extern "C" fn(ws: *mut fiftyoneDegrees_workset_t) -> *const byte,
    >,
    pub tempProfiles: *mut *const fiftyoneDegreesProfile,
    pub importantHeadersCount: i32,
    pub importantHeaders: *mut fiftyoneDegreesHttpHeaderWorkset,
    pub associatedPool: *const fiftyoneDegreesWorksetPool,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_workset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_workset_t>(),
        258usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_workset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_workset_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_workset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).dataSet as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(dataSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).targetUserAgentArray as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(targetUserAgentArray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).targetUserAgentArrayLength
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(targetUserAgentArrayLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).targetUserAgentHashCode
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(targetUserAgentHashCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).hashCodeSet as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(hashCodeSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).method as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).difference as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(difference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).rootNodesEvaluated as *const _
                as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(rootNodesEvaluated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).stringsRead as *const _ as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(stringsRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).nodesEvaluated as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(nodesEvaluated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).signaturesCompared as *const _
                as usize
        },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(signaturesCompared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).signaturesRead as *const _
                as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(signaturesRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).closestSignatures as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(closestSignatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).profiles as *const _ as usize
        },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).profileCount as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(profileCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).signature as *const _ as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).cache as *const _ as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).values as *const _ as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).valuesCount as *const _ as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(valuesCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).input as *const _ as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).targetUserAgent as *const _
                as usize
        },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(targetUserAgent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).relevantNodes as *const _ as usize
        },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(relevantNodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).closestNodes as *const _ as usize
        },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(closestNodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).signatureAsString as *const _
                as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(signatureAsString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).tempheaderlowercase as *const _
                as usize
        },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(tempheaderlowercase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).nodes as *const _ as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).orderedNodes as *const _ as usize
        },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(orderedNodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).nodeCount as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(nodeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).closestNodeRankedSignatureIndex
                as *const _ as usize
        },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(closestNodeRankedSignatureIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).linkedSignatureList as *const _
                as usize
        },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(linkedSignatureList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).nextCharacterPositionIndex
                as *const _ as usize
        },
        211usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(nextCharacterPositionIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).startWithInitialScore as *const _
                as usize
        },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(startWithInitialScore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).functionPtrGetScore as *const _
                as usize
        },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(functionPtrGetScore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).functionPtrNextClosestSignature
                as *const _ as usize
        },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(functionPtrNextClosestSignature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).tempProfiles as *const _ as usize
        },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(tempProfiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).importantHeadersCount as *const _
                as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(importantHeadersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).importantHeaders as *const _
                as usize
        },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(importantHeaders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_t>())).associatedPool as *const _
                as usize
        },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_t),
            "::",
            stringify!(associatedPool)
        )
    );
}
pub type fiftyoneDegreesWorkset = fiftyoneDegrees_workset_t;
pub type fiftyoneDegreesProvider = fiftyoneDegrees_provider_t;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_workset_pool_t {
    pub dataSet: *const fiftyoneDegreesDataSet,
    pub cache: *mut fiftyoneDegreesResultsetCache,
    pub provider: *const fiftyoneDegreesProvider,
    pub size: i32,
    pub available: i32,
    pub worksets: *mut *mut fiftyoneDegreesWorkset,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_workset_pool_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_workset_pool_t>(),
        40usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_workset_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_workset_pool_t>(),
        4usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_workset_pool_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_pool_t>())).dataSet as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_pool_t),
            "::",
            stringify!(dataSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_pool_t>())).cache as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_pool_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_pool_t>())).provider as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_pool_t),
            "::",
            stringify!(provider)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_pool_t>())).size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_pool_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_pool_t>())).available as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_pool_t),
            "::",
            stringify!(available)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_workset_pool_t>())).worksets as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_workset_pool_t),
            "::",
            stringify!(worksets)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_provider_t {
    pub activePool: *mut fiftyoneDegreesWorksetPool,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_provider_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_provider_t>(),
        8usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_provider_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_provider_t>(),
        4usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_provider_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_provider_t>())).activePool as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_provider_t),
            "::",
            stringify!(activePool)
        )
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the provider passed to the method with a data set initialised"]
    #[doc = " from the file provided. If required properties is provided the associated"]
    #[doc = " data set will only return properties contained in the array."]
    #[doc = " @param fileName of the data source to use for initialisation"]
    #[doc = " @param provider pointer to the work set pool to be initialised"]
    #[doc = " @param properties array of strings containing the property names"]
    #[doc = " @param count the number of elements in the requiredProperties array"]
    #[doc = " @param poolSize number of work sets to hold in the pool"]
    #[doc = " @param cacheSize maximum number of items that the User-Agent cache should store"]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of creating"]
    #[doc = "\t\t   the new dataset, pool and cache. If status is anything other than"]
    #[doc = "\t\t   DATA_SET_INIT_STATUS_SUCCESS, then the initialization has failed."]
    pub fn fiftyoneDegreesInitProviderWithPropertyArray(
        fileName: *const ::std::os::raw::c_char,
        provider: *mut fiftyoneDegreesProvider,
        properties: *mut *const ::std::os::raw::c_char,
        count: i32,
        poolSize: ::std::os::raw::c_int,
        cacheSize: ::std::os::raw::c_int,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the provider passed to the method with a data set initialised"]
    #[doc = " from the file provided. If required properties is provided the associated"]
    #[doc = " data set will only return properties contained between separators."]
    #[doc = " @param fileName of the data source to use for initialisation"]
    #[doc = " @param provider pointer to the work set pool to be initialised"]
    #[doc = " @param properties char array to the separated list of properties"]
    #[doc = "        the dataSet can return"]
    #[doc = " @param poolSize number of work sets to hold in the pool"]
    #[doc = " @param cacheSize maximum number of items that the User-Agent cache should store"]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of creating"]
    #[doc = "\t\t   the new dataset, pool and cache. If status is anything other than"]
    #[doc = "\t\t   DATA_SET_INIT_STATUS_SUCCESS, then the initialization has failed."]
    pub fn fiftyoneDegreesInitProviderWithPropertyString(
        fileName: *const ::std::os::raw::c_char,
        provider: *mut fiftyoneDegreesProvider,
        properties: *const ::std::os::raw::c_char,
        poolSize: ::std::os::raw::c_int,
        cacheSize: ::std::os::raw::c_int,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new dataset, work set pool and User-Agent cache using the same"]
    #[doc = " configuration options as the current data set, pool and cache associated"]
    #[doc = " with the provider. The original file location is used to create the new data"]
    #[doc = " set."]
    #[doc = " The exisitng data set, pool and cache are marked to be freed if worksets are"]
    #[doc = " being used by other threads, or if no work sets are in use they are freed"]
    #[doc = " immediately."]
    #[doc = " @param provider pointer to the provider whose data set should be reloaded"]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of the reload"]
    #[doc = " \t   operation."]
    pub fn fiftyoneDegreesProviderReloadFromFile(
        provider: *mut fiftyoneDegreesProvider,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new dataset, work set pool and User-Agent cache using the same"]
    #[doc = " configuration options as the current data set, pool and cache associated"]
    #[doc = " with the provider. The memory located at the source pointer is used to"]
    #[doc = " create the new data set."]
    #[doc = " The exisitng data set, pool and cache are marked to be freed if worksets are"]
    #[doc = " being used by other threads, or if no work sets are in use they are freed"]
    #[doc = " immediately."]
    #[doc = " Important: The memory pointed to by source will NOT be freed by 51Degrees"]
    #[doc = " when the associated data set is freed. The caller is responsible for"]
    #[doc = " releasing the memory. If 51Degrees should release the memory then the"]
    #[doc = " caller should set the memoryToFree field of the data set associated with"]
    #[doc = " the returned pool to source. 51Degrees will then free this memory when the"]
    #[doc = " pool, data set and cache are freed after the last work set is returned to"]
    #[doc = " the pool."]
    #[doc = " @param provider pointer to the provider whose data set should be reloaded"]
    #[doc = " @param provider pointer to the provider whose data set should be reloaded."]
    #[doc = " @param length number of bytes that the file occupies in memory."]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of the reload"]
    #[doc = " \t   operation."]
    pub fn fiftyoneDegreesProviderReloadFromMemory(
        provider: *mut fiftyoneDegreesProvider,
        source: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_long,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Releases all the resources used by the provider. The provider can not be"]
    #[doc = " used without being reinitialised after calling this method."]
    #[doc = " @param provider pointer to the provider to be freed"]
    pub fn fiftyoneDegreesProviderFree(provider: *mut fiftyoneDegreesProvider);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Retrieves a work set from the pool associated with the provider. In multi"]
    #[doc = " threaded operation will always return a work set. In single threaded"]
    #[doc = " operation may return NULL if no work sets are available in the pool."]
    #[doc = " The work set returned must be released back to the provider by calling"]
    #[doc = " fiftyoneDegreesWorksetRelease when finished with."]
    #[doc = " @param provider pointer to the provider to return the work set from"]
    #[doc = " @return pointer to a work set ready to be used for device detection"]
    pub fn fiftyoneDegreesProviderWorksetGet(
        provider: *mut fiftyoneDegreesProvider,
    ) -> *mut fiftyoneDegreesWorkset;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the work set back to the pool it was created from."]
    #[doc = " Worksets created without a pool should be freed using the method"]
    #[doc = " fiftyoneDegreesWorksetFree."]
    #[doc = " @param ws a workset that was created from a pool or provider."]
    pub fn fiftyoneDegreesWorksetRelease(ws: *mut fiftyoneDegreesWorkset);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the data set passed to the method with the data from"]
    #[doc = " the file provided. If required properties is provided the data set"]
    #[doc = " will only return those contained in the array."]
    #[doc = " @param fileName of the data source to use for initialisation"]
    #[doc = " @param dataSet pointer that will be set to the data set created"]
    #[doc = " @param properties array of strings containing the property names"]
    #[doc = " @param count the number of elements in the properties array"]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of creating"]
    #[doc = "\t\t   the new dataset, work set pool and User-Agent cache. If status is"]
    #[doc = "         anything other than DATA_SET_INIT_STATUS_SUCCESS, then the"]
    #[doc = "         initialization has failed."]
    pub fn fiftyoneDegreesInitWithPropertyArray(
        fileName: *const ::std::os::raw::c_char,
        dataSet: *mut fiftyoneDegreesDataSet,
        properties: *mut *const ::std::os::raw::c_char,
        count: i32,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the data set passed to the method with the data from"]
    #[doc = " the file provided. If required properties is provided the data set"]
    #[doc = " will only return those listed and separated by comma, pipe, space"]
    #[doc = " or tab."]
    #[doc = " @param fileName of the data source to use for initialisation"]
    #[doc = " @param dataSet pointer that will be set to the data set created"]
    #[doc = " @param properties char array to the separated list of properties"]
    #[doc = "        the dataSet can return"]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of creating"]
    #[doc = "\t\t   the new dataset, work set pool and User-Agent cache. If status is"]
    #[doc = "         anything other than DATA_SET_INIT_STATUS_SUCCESS, then the"]
    #[doc = "         initialization has failed."]
    pub fn fiftyoneDegreesInitWithPropertyString(
        fileName: *const ::std::os::raw::c_char,
        dataSet: *mut fiftyoneDegreesDataSet,
        properties: *const ::std::os::raw::c_char,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Destroys the data set releasing all memory available. Ensure all work sets,"]
    #[doc = " cache and pool structs are freed prior to calling this method."]
    #[doc = " @param dataSet pointer to the data set being destroyed"]
    pub fn fiftyoneDegreesDataSetFree(dataSet: *const fiftyoneDegreesDataSet);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new User-Agent cache used to speed up duplicate detections."]
    #[doc = " The cache must be destroyed with the fiftyoneDegreesFreeCache method."]
    #[doc = " If the cache size is lower then 2 then no cache is created."]
    #[doc = " @param dataSet pointer to the data set"]
    #[doc = " @param size maximum number of items that the cache should store"]
    #[doc = " @returns a pointer to the resultset cache created, or NULL"]
    pub fn fiftyoneDegreesResultsetCacheCreate(
        dataSet: *const fiftyoneDegreesDataSet,
        size: i32,
    ) -> *mut fiftyoneDegreesResultsetCache;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Releases the memory used by the User-Agent cache."]
    #[doc = " @param pointer to the cache created previously"]
    pub fn fiftyoneDegreesResultsetCacheFree(rsc: *const fiftyoneDegreesResultsetCache);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new work set pool for the data set and User-Agent cache provided."]
    #[doc = " @param dataset pointer to a data set structure"]
    #[doc = " @param cache pointer to a User-Agent cache, or NULL if no cache to be used"]
    #[doc = " @param size number of work sets to hold in the pool"]
    #[doc = " @return a pointer to a new work set pool"]
    pub fn fiftyoneDegreesWorksetPoolCreate(
        dataSet: *mut fiftyoneDegreesDataSet,
        cache: *mut fiftyoneDegreesResultsetCache,
        size: i32,
    ) -> *mut fiftyoneDegreesWorksetPool;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees all work sets in the pool and releases all memory. Ensure all work sets"]
    #[doc = " have been released back to the pool before calling this method."]
    #[doc = " @param pool pointer to the pool created by fiftyoneDegreesWorksetPoolCreate"]
    pub fn fiftyoneDegreesWorksetPoolFree(pool: *const fiftyoneDegreesWorksetPool);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees the work set pool and it's associated User-Agent cache and dataset if"]
    #[doc = " set."]
    #[doc = " @param pool pointer to the pool created by fiftyoneDegreesWorksetPoolCreate"]
    pub fn fiftyoneDegreesWorksetPoolCacheDataSetFree(pool: *const fiftyoneDegreesWorksetPool);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets a work set from the pool. When operating in multi threaded mode the"]
    #[doc = " methods waits for a work set to be returned from another thread. If in"]
    #[doc = " single threaded operation NULL will be returned if the pool is exhausted."]
    #[doc = " Using a pool makes less sense in single threaded operation."]
    #[doc = " @param pool pointer to the work set pool to get the work set from"]
    #[doc = " @returns pointer to a work set that is free and ready for use, or NULL if"]
    #[doc = "          none are available."]
    pub fn fiftyoneDegreesWorksetPoolGet(
        pool: *mut fiftyoneDegreesWorksetPool,
    ) -> *mut fiftyoneDegreesWorkset;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new workset to perform matches using the dataset provided."]
    #[doc = " The workset must be destroyed using the freeWorkset method when it's"]
    #[doc = " finished with to release memory."]
    #[doc = " @param dataSet pointer to the data set"]
    #[doc = " @param cache pointer or NULL if not used"]
    #[doc = " @returns a pointer to the workset created"]
    pub fn fiftyoneDegreesWorksetCreate(
        dataSet: *const fiftyoneDegreesDataSet,
        cache: *const fiftyoneDegreesResultsetCache,
    ) -> *mut fiftyoneDegreesWorkset;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Releases the memory used by the workset."]
    #[doc = " If the work set is associated with a pool then the"]
    #[doc = " fiftyOneDegreesWorksetRelease method should be used to return the workset"]
    #[doc = " to the pool its associated with."]
    #[doc = " @param pointer to the workset created previously"]
    pub fn fiftyoneDegreesWorksetFree(ws: *const fiftyoneDegreesWorkset);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Allocates memory sufficiently large to store JSON results."]
    #[doc = " @param ws pointer to a workset with the results to return in JSON"]
    #[doc = " @returns pointer to memory space to store JSON results"]
    pub fn fiftyoneDegreesJSONCreate(
        ws: *mut fiftyoneDegreesWorkset,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees the memory space previously allocated by fiftyoneDegreesJSONCreate."]
    #[doc = " @param json pointer to the memory space to be freed"]
    pub fn fiftyoneDegreesJSONFree(json: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Allocates memory sufficiently large to store CSV results."]
    #[doc = " @param ws pointer to a workset with the results to return in CSV"]
    #[doc = " @returns pointer to memory space to store CSV results"]
    pub fn fiftyoneDegreesCSVCreate(ws: *mut fiftyoneDegreesWorkset)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees the memory space previously allocated by fiftyoneDegreesCSVCreate."]
    #[doc = " @param csv pointer to the memory space to be freed"]
    pub fn fiftyoneDegreesCSVFree(csv: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Main entry method used for perform a match. First the User-Agent cache is"]
    #[doc = " checked to determine if the User-Agent has already been found. If not then"]
    #[doc = " detection is performed. The cache is then updated before the resultset is"]
    #[doc = " returned."]
    #[doc = " @param ws pointer to a work set to be used for the match created via"]
    #[doc = "        createWorkset function"]
    #[doc = " @param userAgent pointer to the target user agent"]
    pub fn fiftyoneDegreesMatch(
        ws: *mut fiftyoneDegreesWorkset,
        userAgent: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Passed array of HTTP header names and values. Sets the workset to"]
    #[doc = " the results for these headers."]
    #[doc = " @param ws pointer to a work set to be used for the match created via"]
    #[doc = "        createWorkset function"]
    #[doc = " @param httpHeaderNames array of HTTP header names i.e. User-Agent"]
    #[doc = " @param httpHeaderValues array of HTTP header values"]
    #[doc = " @param the number of entires in each array"]
    pub fn fiftyoneDegreesMatchWithHeadersArray(
        ws: *mut fiftyoneDegreesWorkset,
        httpHeaderNames: *mut *const ::std::os::raw::c_char,
        httpHeaderValues: *mut *const ::std::os::raw::c_char,
        httpHeaderCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Passed a string where each line contains the HTTP header name and value."]
    #[doc = " The first space character seperates the HTTP header name at the beginning of"]
    #[doc = " the line and the value."]
    #[doc = " @param ws pointer to a work set to be used for the match created via"]
    #[doc = "        createWorkset function"]
    #[doc = " @param httpHeaders is a list of HTTP headers and values on each line"]
    #[doc = " @param length number of characters in the headers array to consider"]
    pub fn fiftyoneDegreesMatchWithHeadersString(
        ws: *mut fiftyoneDegreesWorkset,
        httpHeaders: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Passed a string where each line contains the HTTP header name and value."]
    #[doc = " The first space character and/or colon seperates the HTTP header name"]
    #[doc = " at the beginning of the line and the value. Does not perform a device"]
    #[doc = " detection. Use fiftyoneDegreesMatchForHttpHeaders to complete a match."]
    #[doc = " @param ws pointer to a work set to have important headers set"]
    #[doc = " @param httpHeaders is a list of HTTP headers and values on each line"]
    #[doc = " @param length number of characters in the headers array to consider"]
    pub fn fiftyoneDegreesSetHttpHeaders(
        ws: *mut fiftyoneDegreesWorkset,
        httpHeaders: *const ::std::os::raw::c_char,
        length: usize,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the workset for the important headers included in the workset."]
    #[doc = " @param ws pointer to a work set to be used for the match created via"]
    #[doc = "        createWorkset function"]
    pub fn fiftyoneDegreesMatchForHttpHeaders(ws: *mut fiftyoneDegreesWorkset);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the values associated with the require property index in the workset"]
    #[doc = " so that an array of values can be read."]
    #[doc = " @param ws pointer to the work set associated with the match"]
    #[doc = " @param requiredPropertyIndex index of the property required from the array of"]
    #[doc = "        require properties"]
    #[doc = " @return the number of values that were set."]
    pub fn fiftyoneDegreesSetValues(
        ws: *mut fiftyoneDegreesWorkset,
        requiredPropertyIndex: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns a pointer to the ascii string at the byte offset provided"]
    #[doc = " @param dataSet pointer to the data set"]
    #[doc = " @param offset to the ascii string required"]
    #[doc = " @return a pointer to the AsciiString at the offset"]
    pub fn fiftyoneDegreesGetString(
        dataSet: *const fiftyoneDegreesDataSet,
        offset: i32,
    ) -> *const fiftyoneDegreesAsciiString;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the values character array to the values of the required property"]
    #[doc = " provided. If the values character array is too small then only the values"]
    #[doc = " that can be fitted in are added."]
    #[doc = " @param ws pointer to a workset configured with the match results"]
    #[doc = " @param requiredPropertyIndex index of the required property"]
    #[doc = " @param values pointer to allocated memory to store the values"]
    #[doc = " @param size the size of the values memory"]
    #[doc = " @return the number of characters written to the values memory"]
    pub fn fiftyoneDegreesGetValues(
        ws: *mut fiftyoneDegreesWorkset,
        requiredPropertyIndex: i32,
        values: *mut ::std::os::raw::c_char,
        size: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the name of the value provided."]
    #[doc = " @param dataSet pointer to the data set containing the value"]
    #[doc = " @param value pointer whose name is required"]
    #[doc = " @return pointer to the char string of the name"]
    pub fn fiftyoneDegreesGetValueName(
        dataSet: *const fiftyoneDegreesDataSet,
        value: *const fiftyoneDegreesValue,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the name of the property provided."]
    #[doc = " @param dataSet pointer to the data set containing the property"]
    #[doc = " @param property pointer whose name is required"]
    #[doc = " @return pointer to the char string of the name"]
    pub fn fiftyoneDegreesGetPropertyName(
        dataSet: *const fiftyoneDegreesDataSet,
        property: *const fiftyoneDegreesProperty,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns whether or not the property is a list property or not as an integer"]
    #[doc = " i.e. 1=true 0=false, or -1 if the property cannot be found."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param propertyName pointer to the name of the property required."]
    #[doc = " @return 1 if the property can return a list, 0 if not, or -1 if the property"]
    #[doc = "         does not exist."]
    pub fn fiftyoneDegreesGetPropertyIsList(
        dataSet: *const fiftyoneDegreesDataSet,
        propertyName: *mut ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets the required property name at the index provided."]
    #[doc = " @param dataset pointer to an initialised dataset"]
    #[doc = " @param index of the property required"]
    #[doc = " @param propertyName pointer to memory to place the property name"]
    #[doc = " @param size of the memory allocated for the name"]
    #[doc = " @return the number of bytes written for the property"]
    pub fn fiftyoneDegreesGetRequiredPropertyName(
        dataSet: *const fiftyoneDegreesDataSet,
        requiredPropertyIndex: ::std::os::raw::c_int,
        propertyName: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets the http header name at the index provided."]
    #[doc = " @param dataset pointer to an initialised dataset"]
    #[doc = " @param index of the http header required"]
    #[doc = " @param httpHeader pointer to memory to place the http header name"]
    #[doc = " @param size of the memory allocated for the name"]
    #[doc = " @return the number of bytes written for the http header"]
    pub fn fiftyoneDegreesGetHttpHeaderName(
        dataSet: *const fiftyoneDegreesDataSet,
        httpHeaderIndex: ::std::os::raw::c_int,
        httpHeader: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the name of the header in prefixed upper case form at the index"]
    #[doc = " provided, or NULL if the index is not valid."]
    #[doc = " @param dataSet pointer to an initialised dataset"]
    #[doc = " @param httpHeaderIndex index of the HTTP header name required"]
    #[doc = " @returns name of the header, or NULL if index not valid"]
    pub fn fiftyoneDegreesGetPrefixedUpperHttpHeaderName(
        dataSet: *const fiftyoneDegreesDataSet,
        httpHeaderIndex: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets the required property index of the property provided, or -1 if the"]
    #[doc = " property is not available in the dataset."]
    #[doc = " @param dataset pointer to an initialised dataset"]
    #[doc = " @param propertyName pointer to the name of the property required"]
    #[doc = " @return the index of the property, or -1 if the property does not exist"]
    pub fn fiftyoneDegreesGetRequiredPropertyIndex(
        dataSet: *const fiftyoneDegreesDataSet,
        propertyName: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Process the workset results into a CSV string."]
    #[doc = " @param ws pointer to a workset with the results to return in CSV"]
    #[doc = " @param csv pointer to memory allocated with fiftyoneDegreesCSVCreate"]
    pub fn fiftyoneDegreesProcessDeviceCSV(
        ws: *mut fiftyoneDegreesWorkset,
        csv: *mut ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Process the workset results into a JSON string."]
    #[doc = " @param ws pointer to a workset with the results to return in JSON"]
    #[doc = " @param json pointer to memory allocated with fiftyoneDegreesJSONCreate"]
    pub fn fiftyoneDegreesProcessDeviceJSON(
        ws: *mut fiftyoneDegreesWorkset,
        json: *mut ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the rank of the signature set in the workset."]
    #[doc = " @param ws pointer to the work set associated with the match"]
    #[doc = " @returns the rank of the signature if available, or INT_MAX"]
    pub fn fiftyoneDegreesGetSignatureRank(ws: *mut fiftyoneDegreesWorkset) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets the signature as a string representing relevent user agent characters."]
    #[doc = " @param ws pointer to the work set associated with the match"]
    #[doc = " @param signatureAsString pointer to memory to place the signature"]
    #[doc = " @param size of the memory allocated for the signature"]
    #[doc = " @return the number of bytes written for the signature"]
    pub fn fiftyoneDegreesGetSignatureAsString(
        ws: *mut fiftyoneDegreesWorkset,
        signatureAsString: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets the device id as a string."]
    #[doc = " @param ws pointer to the work set associated with the match"]
    #[doc = " @param deviceId pointer to memory to place the device id"]
    #[doc = " @param size of the memory allocated for the device id"]
    #[doc = " @return the number of bytes written for the device id"]
    pub fn fiftyoneDegreesGetDeviceId(
        ws: *mut fiftyoneDegreesWorkset,
        deviceId: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the workset for the device Id provided."]
    #[doc = " @param ws pointer to the work set associated with the match."]
    #[doc = " @param deviceId string representation of the device id to use for the match."]
    pub fn fiftyoneDegreesMatchForDeviceId(
        ws: *mut fiftyoneDegreesWorkset,
        deviceId: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets all the profiles within the data set"]
    #[doc = " that relate to the supplied property value pair."]
    #[doc = " @param dataSet pointer to a 51Degrees data set."]
    #[doc = " @param propertyName the name of the property to match as a string."]
    #[doc = " @param valueName the name of the property's value to match as a string."]
    #[doc = " @param profilesList a pointer to the profiles structure to filter."]
    #[doc = " @returns fiftyoneDegreesProfilesStruct* pointer to a profiles structure."]
    pub fn fiftyoneDegreesFindProfiles(
        dataSet: *const fiftyoneDegreesDataSet,
        propertyName: *const ::std::os::raw::c_char,
        valueName: *const ::std::os::raw::c_char,
    ) -> *mut fiftyoneDegreesProfilesStruct;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Gets all the profiles within the supplied profiles list"]
    #[doc = " that relate to the supplied property value pair."]
    #[doc = " @param dataSet pointer to a 51Degrees data set."]
    #[doc = " @param propertyName the name of the property to match as a string."]
    #[doc = " @param valueName the name of the property's value to match as a string."]
    #[doc = " @param profilesList a pointer to the profiles structure to filter."]
    #[doc = " @returns fiftyoneDegreesProfilesStruct* pointer to a profiles structure."]
    pub fn fiftyoneDegreesFindProfilesInProfiles(
        dataSet: *const fiftyoneDegreesDataSet,
        propertyName: *const ::std::os::raw::c_char,
        valueName: *const ::std::os::raw::c_char,
        profilesList: *mut fiftyoneDegreesProfilesStruct,
    ) -> *mut fiftyoneDegreesProfilesStruct;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees a profiles structure returned from either the"]
    #[doc = " fiftyoneDegreesFindProfiles or fiftyoneDegreesFindProfilesInProfiles"]
    #[doc = " function."]
    #[doc = " @param profiles the profiles list to be freed."]
    pub fn fiftyoneDegreesFreeProfilesStruct(profiles: *mut fiftyoneDegreesProfilesStruct);
}
extern "C" {
    pub static mut fiftyoneDegreesMalloc:
        ::std::option::Option<unsafe extern "C" fn(__size: usize) -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    pub static mut fiftyoneDegreesCalloc: ::std::option::Option<
        unsafe extern "C" fn(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut fiftyoneDegreesFree:
        ::std::option::Option<unsafe extern "C" fn(__ptr: *mut ::std::os::raw::c_void)>;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Calculates the amount of memory that the provider will need to allocate for"]
    #[doc = " the given data file and initialisation parameters. This should be used with"]
    #[doc = " the fiftyoneDegreesInitProviderWithPropertyString function."]
    #[doc = " NOTE: This function will over estimate by about 10 bytes to account for a"]
    #[doc = " possible increase in http headers."]
    #[doc = " @param fileName the file path of the data file."]
    #[doc = " @param properties the comma separated string of properties that will be"]
    #[doc = " initialised."]
    #[doc = " @param poolSize the number of work sets the pool will contain."]
    #[doc = " @param cacheSize the size of the User-Agent cache."]
    #[doc = " @return size_t the total size in bytes that is needed to initilaise the"]
    #[doc = " provider with the given parameters."]
    pub fn fiftyoneDegreesGetProviderSizeWithPropertyString(
        fileName: *const ::std::os::raw::c_char,
        properties: *const ::std::os::raw::c_char,
        poolSize: ::std::os::raw::c_int,
        cacheSize: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Calculates the amount of memory that the provider will need to allocate for"]
    #[doc = " the given data file and initialisation parameters. This should be used with"]
    #[doc = " the fiftyoneDegreesInitProviderWithPropertyArray function."]
    #[doc = " NOTE: This function will over estimate by about 10 bytes to account for a"]
    #[doc = " possible increase in http headers."]
    #[doc = " @param fileName the file path of the data file."]
    #[doc = " @param propertyCount the number of properties in the properties array."]
    #[doc = " @param poolSize the number of work sets the pool will contain."]
    #[doc = " @param cacheSize the size of the User-Agent cache."]
    #[doc = " @return size_t the total size in bytes that is needed to initialise the"]
    #[doc = " provider with the given parameters."]
    pub fn fiftyoneDegreesGetProviderSizeWithPropertyCount(
        fileName: *const ::std::os::raw::c_char,
        propertyCount: ::std::os::raw::c_int,
        poolSize: ::std::os::raw::c_int,
        cacheSize: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Finds the maximum string length of the values associated with the given"]
    #[doc = " property name."]
    #[doc = " @param dataSet pointer to a fiftyoneDegreesDataSet."]
    #[doc = " @param propertyName the name of the property to find the value length for."]
    #[doc = " @returns int32_t the maximum string length of the values associated with the"]
    #[doc = " given property or -1 if the property was not found."]
    pub fn fiftyoneDegreesGetMaxPropertyValueLength(
        dataSet: *const fiftyoneDegreesDataSet,
        propertyName: *mut ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    #[doc = " OBSOLETE METHODS - RETAINED FOR BACKWARDS COMPAITABILITY"]
    pub fn fiftyoneDegreesCreateWorkset(
        dataSet: *const fiftyoneDegreesDataSet,
    ) -> *mut fiftyoneDegreesWorkset;
}
extern "C" {
    pub fn fiftyoneDegreesFreeWorkset(ws: *const fiftyoneDegreesWorkset);
}
extern "C" {
    pub fn fiftyoneDegreesDestroy(dataSet: *const fiftyoneDegreesDataSet);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Releases the workset provided back to the pool making it available for future"]
    #[doc = " use."]
    #[doc = ""]
    #[doc = " The method is obsolete as all worksets now have a pool associated with them"]
    #[doc = " which used when returning the work set to the pool."]
    #[doc = ""]
    #[doc = " @param pool containing work sets"]
    #[doc = " @param ws workset to be placed back on the queue"]
    pub fn fiftyoneDegreesWorksetPoolRelease(
        pool: *mut fiftyoneDegreesWorksetPool,
        ws: *mut fiftyoneDegreesWorkset,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Determines if the compiled code supports multi threading."]
    #[doc = " @return boolean where true means multi threading is supported."]
    pub fn fiftyoneDegreesGetIsThreadSafe() -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
