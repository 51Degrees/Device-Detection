/* automatically generated by rust-bindgen */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101406;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const __CTERMID_DEFINED: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const FIFTYONEDEGREES_HTTP_PREFIX_UPPER: &'static [u8; 6usize] = b"HTTP_\0";
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_SUCCESS:
    e_fiftyoneDegreesDataSetInitStatus = 0;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_INSUFFICIENT_MEMORY:
    e_fiftyoneDegreesDataSetInitStatus = 1;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_CORRUPT_DATA:
    e_fiftyoneDegreesDataSetInitStatus = 2;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_INCORRECT_VERSION:
    e_fiftyoneDegreesDataSetInitStatus = 3;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_FILE_NOT_FOUND:
    e_fiftyoneDegreesDataSetInitStatus = 4;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_NOT_SET:
    e_fiftyoneDegreesDataSetInitStatus = 5;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_POINTER_OUT_OF_BOUNDS:
    e_fiftyoneDegreesDataSetInitStatus = 6;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_NULL_POINTER:
    e_fiftyoneDegreesDataSetInitStatus = 7;
pub const e_fiftyoneDegreesDataSetInitStatus_DATA_SET_INIT_STATUS_TOO_MANY_OPEN_FILES:
    e_fiftyoneDegreesDataSetInitStatus = 8;
pub type e_fiftyoneDegreesDataSetInitStatus = u32;
pub use self::e_fiftyoneDegreesDataSetInitStatus as fiftyoneDegreesDataSetInitStatus;
pub type fiftyoneDegreesActiveDataSet = fiftyoneDegrees_active_dataset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_device_offset_t {
    pub httpHeaderOffset: ::std::os::raw::c_int,
    pub deviceOffset: ::std::os::raw::c_int,
    pub length: usize,
    pub userAgent: *mut ::std::os::raw::c_char,
    pub difference: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_device_offset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_device_offset_t>(),
        32usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_device_offset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_device_offset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_device_offset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offset_t>())).httpHeaderOffset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offset_t),
            "::",
            stringify!(httpHeaderOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offset_t>())).deviceOffset as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offset_t),
            "::",
            stringify!(deviceOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offset_t>())).length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offset_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offset_t>())).userAgent as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offset_t),
            "::",
            stringify!(userAgent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offset_t>())).difference as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offset_t),
            "::",
            stringify!(difference)
        )
    );
}
pub type fiftyoneDegreesDeviceOffset = fiftyoneDegrees_device_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_device_offsets_t {
    pub size: ::std::os::raw::c_int,
    pub firstOffset: *mut fiftyoneDegreesDeviceOffset,
    pub active: *mut fiftyoneDegreesActiveDataSet,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_device_offsets_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_device_offsets_t>(),
        24usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_device_offsets_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_device_offsets_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_device_offsets_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offsets_t>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offsets_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offsets_t>())).firstOffset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offsets_t),
            "::",
            stringify!(firstOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_device_offsets_t>())).active as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_device_offsets_t),
            "::",
            stringify!(active)
        )
    );
}
pub type fiftyoneDegreesDeviceOffsets = fiftyoneDegrees_device_offsets_t;
pub type byte = ::std::os::raw::c_uchar;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_date_t {
    pub year: i16,
    pub month: byte,
    pub day: byte,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_date_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_date_t>(),
        4usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_date_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_date_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_date_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_date_t>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_date_t),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_date_t>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_date_t),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_date_t>())).day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_date_t),
            "::",
            stringify!(day)
        )
    );
}
pub type fiftyoneDegreesDate = fiftyoneDegrees_date_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_property_t {
    pub stringOffset: i32,
    pub componentIndex: i32,
    pub subIndex: i32,
    pub headerCount: i32,
    pub headerFirstIndex: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_property_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_property_t>(),
        20usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_property_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_property_t>(),
        4usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_property_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_property_t>())).stringOffset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_property_t),
            "::",
            stringify!(stringOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_property_t>())).componentIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_property_t),
            "::",
            stringify!(componentIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_property_t>())).subIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_property_t),
            "::",
            stringify!(subIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_property_t>())).headerCount as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_property_t),
            "::",
            stringify!(headerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_property_t>())).headerFirstIndex as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_property_t),
            "::",
            stringify!(headerFirstIndex)
        )
    );
}
pub type fiftyoneDegreesProperty = fiftyoneDegrees_property_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_signature_node_hash_t {
    pub hashCode: u32,
    pub nodeOffset: i32,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_signature_node_hash_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_signature_node_hash_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(fiftyoneDegrees_signature_node_hash_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_signature_node_hash_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_signature_node_hash_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_hash_t>())).hashCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_hash_t),
            "::",
            stringify!(hashCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_hash_t>())).nodeOffset as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_hash_t),
            "::",
            stringify!(nodeOffset)
        )
    );
}
pub type fiftyoneDegreesSignatureNodeHash = fiftyoneDegrees_signature_node_hash_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_signature_node_t {
    pub unmatchedNodeOffset: i32,
    pub firstIndex: i16,
    pub lastIndex: i16,
    pub length: byte,
    pub hashesCount: i32,
    pub modulo: i32,
    pub hashes: fiftyoneDegreesSignatureNodeHash,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_signature_node_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_signature_node_t>(),
        25usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_signature_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_signature_node_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_signature_node_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_t>())).unmatchedNodeOffset
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_t),
            "::",
            stringify!(unmatchedNodeOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_t>())).firstIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_t),
            "::",
            stringify!(firstIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_t>())).lastIndex as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_t),
            "::",
            stringify!(lastIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_t>())).length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_t>())).hashesCount as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_t),
            "::",
            stringify!(hashesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_t>())).modulo as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_t),
            "::",
            stringify!(modulo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_signature_node_t>())).hashes as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_signature_node_t),
            "::",
            stringify!(hashes)
        )
    );
}
pub type fiftyoneDegreesSignatureNode = fiftyoneDegrees_signature_node_t;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_dataset_header_t {
    pub version: u16,
    pub formatOffset: i32,
    pub nameOffset: i32,
    pub tag: [byte; 16usize],
    pub published: fiftyoneDegreesDate,
    pub nextUpdate: fiftyoneDegreesDate,
    pub copyrightOffset: i32,
    pub maxStringLength: u16,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_dataset_header_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_dataset_header_t>(),
        40usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_dataset_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_dataset_header_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_dataset_header_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).version as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).formatOffset as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(formatOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).nameOffset as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(nameOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).tag as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).published as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(published)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).nextUpdate as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(nextUpdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).copyrightOffset as *const _
                as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(copyrightOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_header_t>())).maxStringLength as *const _
                as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_header_t),
            "::",
            stringify!(maxStringLength)
        )
    );
}
pub type fiftyoneDegreesDataSetHeader = fiftyoneDegrees_dataset_header_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_list_t {
    pub firstElement: *mut byte,
    pub count: ::std::os::raw::c_uint,
    pub freeMemory: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_list_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_list_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_list_t>())).firstElement as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_list_t),
            "::",
            stringify!(firstElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_list_t>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_list_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_list_t>())).freeMemory as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_list_t),
            "::",
            stringify!(freeMemory)
        )
    );
}
pub type fiftyoneDegreesList = fiftyoneDegrees_list_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_integers_t {
    pub firstElement: *mut i32,
    pub count: ::std::os::raw::c_uint,
    pub freeMemory: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_integers_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_integers_t>(),
        16usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_integers_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_integers_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_integers_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_integers_t>())).firstElement as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_integers_t),
            "::",
            stringify!(firstElement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_integers_t>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_integers_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_integers_t>())).freeMemory as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_integers_t),
            "::",
            stringify!(freeMemory)
        )
    );
}
pub type fiftyoneDegreesIntegers = fiftyoneDegrees_integers_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_properties_t {
    pub firstElement: *mut fiftyoneDegreesProperty,
    pub count: ::std::os::raw::c_uint,
    pub freeMemory: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_properties_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_properties_t>(),
        16usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_properties_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_properties_t>())).firstElement as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_properties_t),
            "::",
            stringify!(firstElement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_properties_t>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_properties_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_properties_t>())).freeMemory as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_properties_t),
            "::",
            stringify!(freeMemory)
        )
    );
}
pub type fiftyoneDegreesProperties = fiftyoneDegrees_properties_t;
#[doc = " Reference information associated with entity types that can vary based on"]
#[doc = " compiler directives."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_collection_t {
    pub firstByte: *mut byte,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_collection_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_collection_t>(),
        16usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_collection_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_collection_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_collection_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_collection_t>())).firstByte as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_collection_t),
            "::",
            stringify!(firstByte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_collection_t>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_collection_t),
            "::",
            stringify!(count)
        )
    );
}
pub type fiftyoneDegreesCollection = fiftyoneDegrees_collection_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_dataset_t {
    pub header: fiftyoneDegreesDataSetHeader,
    pub memoryToFree: *const ::std::os::raw::c_void,
    pub fileName: *const ::std::os::raw::c_char,
    pub devicePropertiesCount: ::std::os::raw::c_int,
    pub baseDrift: ::std::os::raw::c_int,
    pub baseDifference: ::std::os::raw::c_int,
    pub devicesIntegerCount: ::std::os::raw::c_int,
    pub requiredPropertiesNames: *mut *const ::std::os::raw::c_char,
    pub prefixedUpperHttpHeaders: *mut *const ::std::os::raw::c_char,
    pub components: fiftyoneDegreesIntegers,
    pub allProperties: fiftyoneDegreesProperties,
    pub httpHeaders: fiftyoneDegreesIntegers,
    pub uniqueHttpHeaders: fiftyoneDegreesIntegers,
    pub requiredProperties: fiftyoneDegreesIntegers,
    pub strings: fiftyoneDegreesCollection,
    pub profiles: fiftyoneDegreesCollection,
    pub devices: fiftyoneDegreesCollection,
    pub nodes: fiftyoneDegreesCollection,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_dataset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_dataset_t>(),
        232usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_dataset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_dataset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_dataset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).memoryToFree as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(memoryToFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).fileName as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(fileName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).devicePropertiesCount as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(devicePropertiesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).baseDrift as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(baseDrift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).baseDifference as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(baseDifference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).devicesIntegerCount as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(devicesIntegerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).requiredPropertiesNames
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(requiredPropertiesNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).prefixedUpperHttpHeaders
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(prefixedUpperHttpHeaders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).components as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).allProperties as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(allProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).httpHeaders as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(httpHeaders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).uniqueHttpHeaders as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(uniqueHttpHeaders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).requiredProperties as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(requiredProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).strings as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).profiles as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).devices as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(devices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_dataset_t>())).nodes as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_dataset_t),
            "::",
            stringify!(nodes)
        )
    );
}
pub type fiftyoneDegreesDataSet = fiftyoneDegrees_dataset_t;
pub type fiftyoneDegreesProvider = fiftyoneDegrees_provider_t;
#[doc = " Active wrapper for the provider's dataset. This is used to make reloading"]
#[doc = " thread safe."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_active_dataset_t {
    pub dataSet: *mut fiftyoneDegreesDataSet,
    pub provider: *mut fiftyoneDegreesProvider,
    pub inUse: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_active_dataset_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_active_dataset_t>(),
        24usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_active_dataset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_active_dataset_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fiftyoneDegrees_active_dataset_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_active_dataset_t>())).dataSet as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_active_dataset_t),
            "::",
            stringify!(dataSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_active_dataset_t>())).provider as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_active_dataset_t),
            "::",
            stringify!(provider)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_active_dataset_t>())).inUse as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_active_dataset_t),
            "::",
            stringify!(inUse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_provider_t {
    pub active: *mut fiftyoneDegreesActiveDataSet,
}
#[test]
fn bindgen_test_layout_fiftyoneDegrees_provider_t() {
    assert_eq!(
        ::std::mem::size_of::<fiftyoneDegrees_provider_t>(),
        8usize,
        concat!("Size of: ", stringify!(fiftyoneDegrees_provider_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fiftyoneDegrees_provider_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fiftyoneDegrees_provider_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fiftyoneDegrees_provider_t>())).active as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fiftyoneDegrees_provider_t),
            "::",
            stringify!(active)
        )
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the dataset using the file provided and an array of properties."]
    #[doc = " @param fileName the path to a 51Degrees data file."]
    #[doc = " @param dataSet pointer to a dataset which has been allocated with the"]
    #[doc = " correct size."]
    #[doc = " @param properties a string array containing the properties to be"]
    #[doc = " initialised."]
    #[doc = " @param propertyCount the number of properties in the array"]
    #[doc = " @returns fiftyoneDegreesDataSetInitStatus indicates whether or not the"]
    #[doc = "  dataset has been initialised correctly."]
    pub fn fiftyoneDegreesInitWithPropertyArray(
        fileName: *const ::std::os::raw::c_char,
        dataSet: *mut fiftyoneDegreesDataSet,
        properties: *mut *const ::std::os::raw::c_char,
        propertyCount: ::std::os::raw::c_int,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the dataset using the file provided and a string of properties."]
    #[doc = " @param fileName the path to a 51Degrees data file."]
    #[doc = " @param dataSet pointer to a dataset which has been allocated with the"]
    #[doc = " correct size."]
    #[doc = " @param properties a comma separated string containing the properties to be"]
    #[doc = " initialised."]
    #[doc = " @returns fiftyoneDegreesDataSetInitStatus indicates whether or not the"]
    #[doc = " dataset has been initialised correctly."]
    pub fn fiftyoneDegreesInitWithPropertyString(
        fileName: *const ::std::os::raw::c_char,
        dataSet: *mut fiftyoneDegreesDataSet,
        properties: *const ::std::os::raw::c_char,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the number of characters which matched in the Trie."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param userAgent User-Agent to use."]
    #[doc = " @returns int the number of matching characters from the User-Agent."]
    pub fn fiftyoneDegreesGetDeviceOffset(
        dataSet: *mut fiftyoneDegreesDataSet,
        userAgent: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the offsets structure passed to the method for the User-Agent provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param userAgent to match for."]
    #[doc = " @param httpHeaderIndex of the User-Agent."]
    #[doc = " @param offset to set."]
    pub fn fiftyoneDegreesSetDeviceOffset(
        dataSet: *mut fiftyoneDegreesDataSet,
        userAgent: *const ::std::os::raw::c_char,
        httpHeaderIndex: ::std::os::raw::c_int,
        offset: *mut fiftyoneDegreesDeviceOffset,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the offsets structure passed to the method for the User-Agent provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param userAgent to match for."]
    #[doc = " @param httpHeaderIndex of the User-Agent."]
    #[doc = " @param offset to set."]
    #[doc = " @param drift to extend the search range by."]
    #[doc = " @param difference to allow in hash values."]
    pub fn fiftyoneDegreesSetDeviceOffsetWithTolerances(
        dataSet: *mut fiftyoneDegreesDataSet,
        userAgent: *const ::std::os::raw::c_char,
        httpHeaderIndex: ::std::os::raw::c_int,
        offset: *mut fiftyoneDegreesDeviceOffset,
        drift: ::std::os::raw::c_int,
        difference: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the offsets structure passed to the method for the User-Agent provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param userAgent to match for."]
    #[doc = " @param userAgentLength of the User-Agent."]
    #[doc = " @param httpHeaderIndex of the User-Agent."]
    #[doc = " @param offset to set."]
    #[doc = " @param drift to extend the search range by."]
    #[doc = " @param difference to allow in hash values."]
    pub fn fiftyoneDegreesSetDeviceOffsetFromArrayWithTolerances(
        dataSet: *mut fiftyoneDegreesDataSet,
        userAgent: *const ::std::os::raw::c_char,
        userAgentLength: ::std::os::raw::c_int,
        httpHeaderIndex: ::std::os::raw::c_int,
        offset: *mut fiftyoneDegreesDeviceOffset,
        drift: ::std::os::raw::c_int,
        difference: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the offsets to a matching devices based on the HTTP headers provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param httpHeaders to match for."]
    #[doc = " @param size of the HTTP headers string."]
    #[doc = " @returns fiftyoneDegreesDeviceOffsets* pointer to newly created device"]
    #[doc = " offsets from the match."]
    pub fn fiftyoneDegreesGetDeviceOffsetsWithHeadersString(
        dataSet: *mut fiftyoneDegreesDataSet,
        httpHeaders: *mut ::std::os::raw::c_char,
        length: usize,
    ) -> *mut fiftyoneDegreesDeviceOffsets;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new device offsets structure with memory allocated."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @returns fiftyoneDegreesDeviceOffsets* newly created device offsets."]
    pub fn fiftyoneDegreesCreateDeviceOffsets(
        dataSet: *mut fiftyoneDegreesDataSet,
    ) -> *mut fiftyoneDegreesDeviceOffsets;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Resets the device offsets to the state they were in when they were created"]
    #[doc = " with fiftyoneDegreesCreateDeviceOffsets."]
    #[doc = " @param offsets to reset."]
    pub fn fiftyoneDegreesResetDeviceOffsets(offsets: *mut fiftyoneDegreesDeviceOffsets);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees the memory used by the offsets."]
    #[doc = " @param offsets to free."]
    pub fn fiftyoneDegreesFreeDeviceOffsets(offsets: *mut fiftyoneDegreesDeviceOffsets);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new device offsets structure with memory allocated and"]
    #[doc = " increments the inUse counter in the provider so the dataset will"]
    #[doc = " not be freed until this is. A corresponding call to"]
    #[doc = " fiftyoneDegreesProviderFreeDeviceOffsets must be made when these"]
    #[doc = " offsets are finished with."]
    #[doc = " @param provider pointer to an initialised provider."]
    #[doc = " @returns fiftyoneDegreesDeviceOffsets* newly created device offsets."]
    pub fn fiftyoneDegreesProviderCreateDeviceOffsets(
        provider: *mut fiftyoneDegreesProvider,
    ) -> *mut fiftyoneDegreesDeviceOffsets;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees the memory used by the offsets created by"]
    #[doc = " fiftyoneDegreesProviderCreateDeviceOffsets and decrements the inUse counter"]
    #[doc = " for the associated dataset."]
    #[doc = " @param offsets to free."]
    pub fn fiftyoneDegreesProviderFreeDeviceOffsets(offsets: *mut fiftyoneDegreesDeviceOffsets);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the offsets to a matching devices based on the HTTP headers provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param offsets to set."]
    #[doc = " @param httpHeaders to match for."]
    #[doc = " @param size of the headers string."]
    pub fn fiftyoneDegreesSetDeviceOffsetsWithHeadersString(
        dataSet: *mut fiftyoneDegreesDataSet,
        offsets: *mut fiftyoneDegreesDeviceOffsets,
        httpHeaders: *mut ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the index of the property requested, or -1 if not available."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param value name of the property to find."]
    #[doc = " @returns int the index of the property requested, or -1 if not available."]
    pub fn fiftyoneDegreesGetPropertyIndex(
        dataSet: *mut fiftyoneDegreesDataSet,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Takes the results of getDeviceOffset and getPropertyIndex to return a value."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param deviceOffset to get the property from."]
    #[doc = " @param propertyIndex of the requested property."]
    #[doc = " @return const char* the value of the requested property"]
    pub fn fiftyoneDegreesGetValue(
        dataSet: *mut fiftyoneDegreesDataSet,
        deviceOffset: ::std::os::raw::c_int,
        propertyIndex: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the number of properties that have been loaded in the dataset."]
    #[doc = " @param dataSet pointer to an initialised dataset,"]
    #[doc = " @returns int32_t number of initialised properties in the dataset."]
    pub fn fiftyoneDegreesGetRequiredPropertiesCount(
        dataSet: *mut fiftyoneDegreesDataSet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the names of the properties loaded in the dataset."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @retuens const char** pointer to the array of initialised properties."]
    pub fn fiftyoneDegreesGetRequiredPropertiesNames(
        dataSet: *mut fiftyoneDegreesDataSet,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the index in the array of required properties for this name, or -1 if not found."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param propertyName name of the property to get."]
    #[doc = " @returns int index in the dataset's requiredProperties array, or -1 if not found."]
    pub fn fiftyoneDegreesGetRequiredPropertyIndex(
        dataSet: *mut fiftyoneDegreesDataSet,
        propertyName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Frees the memory used by the dataset."]
    #[doc = " @param dataSet a pointer to the dataset to be freed."]
    pub fn fiftyoneDegreesDataSetFree(dataSet: *mut fiftyoneDegreesDataSet);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the number of HTTP headers relevant to device detection."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @returns int the number of relevant HTTP headers."]
    pub fn fiftyoneDegreesGetHttpHeaderCount(
        dataSet: *mut fiftyoneDegreesDataSet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the HTTP header name offset at the index provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param httpHeaderIndex index of the header to get."]
    #[doc = " @returns int the name offset of the HTTP header."]
    pub fn fiftyoneDegreesGetHttpHeaderNameOffset(
        dataSet: *mut fiftyoneDegreesDataSet,
        httpHeaderIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns a pointer to the HTTP header name at the index provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param httpHeaderIndex index of the header to get."]
    #[doc = " @returns const char* the name of the HTTP header."]
    pub fn fiftyoneDegreesGetHttpHeaderNamePointer(
        dataSet: *mut fiftyoneDegreesDataSet,
        httpHeaderIndex: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the name of the header in prefixed upper case form at the index"]
    #[doc = " provided, or NULL if the index is not valid."]
    #[doc = " @param dataSet pointer to an initialised dataset"]
    #[doc = " @param httpHeaderIndex index of the HTTP header name required"]
    #[doc = " @returns name of the header, or NULL if index not valid"]
    pub fn fiftyoneDegreesGetPrefixedUpperHttpHeaderName(
        dataSet: *mut fiftyoneDegreesDataSet,
        httpHeaderIndex: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the HTTP header string to the header name at the index provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param httpHeaderIndex index of the header to get."]
    #[doc = " @param httpHeader to set."]
    #[doc = " @param size allocated to httpHeader."]
    #[doc = " @returns int the length of the HTTP header, or the requred length as a"]
    #[doc = " negative if size is not large enough."]
    pub fn fiftyoneDegreesGetHttpHeaderName(
        dataSet: *mut fiftyoneDegreesDataSet,
        httpHeaderIndex: ::std::os::raw::c_int,
        httpHeader: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the index of the unique header, or -1 if the header is not important."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param httpHeaderName name of the header to get the index of."]
    #[doc = " @param length of the header name."]
    #[doc = " @returns int index of the unique header, or -1 if the header is not"]
    #[doc = " important."]
    pub fn fiftyoneDegreesGetUniqueHttpHeaderIndex(
        dataSet: *mut fiftyoneDegreesDataSet,
        httpHeaderName: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the propertyName string to the property name at the index provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param requiredPropertIndex index in the dataset's requiredProperties array."]
    #[doc = " @param propertyName to set."]
    #[doc = " @param size allocated to propertyName."]
    #[doc = " @returns int the length of the property name , or the requred length as a"]
    #[doc = " negative if size is not large enough."]
    pub fn fiftyoneDegreesGetRequiredPropertyName(
        dataSet: *mut fiftyoneDegreesDataSet,
        requiredPropertyIndex: ::std::os::raw::c_int,
        propertyName: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the values string to the property values for the device offsets and"]
    #[doc = " index provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param deviceOffsets to get the property from."]
    #[doc = " @param requiredPropertyIndex index in the dataset's requiredProperties"]
    #[doc = "\t\t  array."]
    #[doc = " @param values string to set."]
    #[doc = " @param size allocated to the values string."]
    #[doc = " @returns int the length of the values string, or the required length as a"]
    #[doc = " negative if size is not large enough."]
    pub fn fiftyoneDegreesGetValueFromOffsets(
        dataSet: *mut fiftyoneDegreesDataSet,
        deviceOffsets: *mut fiftyoneDegreesDeviceOffsets,
        requiredPropertyIndex: ::std::os::raw::c_int,
        values: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns a pointer to the value for the property based on the device offsets"]
    #[doc = " provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param deviceOffsets to get the property from."]
    #[doc = " @param requiredPropertyIndex index in the dataset's requiredProperties array."]
    #[doc = " @returns const char* pointer to the value of the requested property, or NULL"]
    #[doc = " if the property does not exist."]
    pub fn fiftyoneDegreesGetValuePtrFromOffsets(
        dataSet: *mut fiftyoneDegreesDataSet,
        deviceOffsets: *mut fiftyoneDegreesDeviceOffsets,
        requiredPropertyIndex: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Process device properties into a CSV string for the device offset provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param deviceOffset from a match to process."]
    #[doc = " @param result buffer to store the CSV in."]
    #[doc = " @param resultLength allocated to result buffer."]
    #[doc = " @returns int the length used in the buffer, 0 if there are no properties, or"]
    #[doc = " -1 if the buffer is not long enough."]
    pub fn fiftyoneDegreesProcessDeviceCSV(
        dataSet: *mut fiftyoneDegreesDataSet,
        deviceOffset: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_char,
        resultLength: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Process device properties into a JSON string for the device offset provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param deviceOffset from a match to process."]
    #[doc = " @param result buffer to store the JSON in."]
    #[doc = " @param resultLength allocated to result buffer."]
    #[doc = " @returns int the length used in the buffer, 0 if there are no properties, or"]
    #[doc = " -1 if the buffer is not long enough."]
    pub fn fiftyoneDegreesProcessDeviceJSON(
        dataSet: *mut fiftyoneDegreesDataSet,
        deviceOffset: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_char,
        resultLength: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Process device properties into a JSON string for the device offsets provided."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param deviceOffsets from a match to process."]
    #[doc = " @param result buffer to store the JSON in."]
    #[doc = " @param resultLength allocated to result buffer."]
    #[doc = " @returns int the length used in the buffer, 0 if there are no properties, or"]
    #[doc = " -1 if the buffer is not long enough."]
    pub fn fiftyoneDegreesProcessDeviceOffsetsJSON(
        dataSet: *mut fiftyoneDegreesDataSet,
        deviceOffsets: *mut fiftyoneDegreesDeviceOffsets,
        result: *mut ::std::os::raw::c_char,
        resultLength: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Returns the number of characters which matched in the Trie."]
    #[doc = " @param dataSet pointer to an initialised dataset."]
    #[doc = " @param userAgent User-Agent to use."]
    #[doc = " @returns int the number of matching characters from the User-Agent."]
    pub fn fiftyoneDegreesGetMatchedUserAgentLength(
        dataSet: *mut fiftyoneDegreesDataSet,
        userAgent: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fiftyoneDegreesMalloc:
        ::std::option::Option<unsafe extern "C" fn(__size: usize) -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    pub static mut fiftyoneDegreesFree:
        ::std::option::Option<unsafe extern "C" fn(__ptr: *mut ::std::os::raw::c_void)>;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Get the size the dataset will need in memory when initialised with the"]
    #[doc = " provided properties. Returns -1 if the file could not be accessed."]
    #[doc = " @param fileName path to a valid data file."]
    #[doc = " @param properties comma separated list of property strings."]
    #[doc = " @returns size_t the size in memory needed to initialise the dataset,"]
    #[doc = " or -1 if the file could not be accessed."]
    pub fn fiftyoneDegreesGetProviderSizeWithPropertyString(
        fileName: *const ::std::os::raw::c_char,
        properties: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Get the size the dataset will need in memory when initialised with the"]
    #[doc = " provided properties. Returns -1 if the file could not be accessed."]
    #[doc = " @param fileName path to a valid data file."]
    #[doc = " @param propertyCount the number of properties to be initialised."]
    #[doc = " @returns size_t the size in memory needed to initialise the dataset,"]
    #[doc = " or -1 if the file could not be accessed."]
    pub fn fiftyoneDegreesGetProviderSizeWithPropertyCount(
        fileName: *const ::std::os::raw::c_char,
        propertyCount: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the provider using the file provided and a string of properties."]
    #[doc = " @param fileName the path to a 51Degrees data file."]
    #[doc = " @param provider pointer to a provider which has been allocated with the"]
    #[doc = " correct size."]
    #[doc = " @param properties a comma separated string containing the properties to be"]
    #[doc = " initialised."]
    #[doc = " @returns fiftyoneDegreesDataSetInitStatus indicates whether or not the"]
    #[doc = " provider has been initialised correctly."]
    pub fn fiftyoneDegreesInitProviderWithPropertyString(
        fileName: *const ::std::os::raw::c_char,
        provider: *mut fiftyoneDegreesProvider,
        properties: *const ::std::os::raw::c_char,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Initialises the provider using the file provided and an array of properties."]
    #[doc = " @param fileName the path to a 51Degrees data file."]
    #[doc = " @param provider pointer to a provider which has been allocated with the"]
    #[doc = " correct size."]
    #[doc = " @param properties a string array containing the properties to be"]
    #[doc = " initialised."]
    #[doc = " @param propertyCount the number of properties in the array."]
    #[doc = " @returns fiftyoneDegreesDataSetInitStatus indicates whether or not the"]
    #[doc = " provider has been initialised correctly."]
    pub fn fiftyoneDegreesInitProviderWithPropertyArray(
        fileName: *const ::std::os::raw::c_char,
        provider: *mut fiftyoneDegreesProvider,
        properties: *mut *const ::std::os::raw::c_char,
        propertyCount: ::std::os::raw::c_int,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Releases all the resources used by the provider. The provider can not be"]
    #[doc = " used without being reinitialised after calling this method."]
    #[doc = " @param provider pointer to the provider to be freed."]
    pub fn fiftyoneDegreesProviderFree(provider: *mut fiftyoneDegreesProvider);
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new dataset using the same configuration options"]
    #[doc = " as the current data set associated with the provider. The data file"]
    #[doc = " which the provider was initialised with  is used to create the new data set."]
    #[doc = " @param provider pointer to the provider whose data set should be reloaded"]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of the reload"]
    #[doc = " \t   operation."]
    pub fn fiftyoneDegreesProviderReloadFromFile(
        provider: *mut fiftyoneDegreesProvider,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Creates a new dataset using the same configuration options"]
    #[doc = " as the current data set associated with the provider. The"]
    #[doc = " memory located at the source pointer is used to create the new data set."]
    #[doc = " Important: The memory pointed to by source will NOT be freed by 51Degrees"]
    #[doc = " when the associated data set is freed. The caller is responsible for"]
    #[doc = " releasing the memory. If 51Degrees should release the memory then the"]
    #[doc = " caller should set the memoryToFree field of the data set associated with"]
    #[doc = " the returned pool to source. 51Degrees will then free this memory when the"]
    #[doc = " data set is freed."]
    #[doc = " @param provider pointer to the provider whose data set should be reloaded"]
    #[doc = " @param source pointer to the dataset held in memory."]
    #[doc = " @param length number of bytes that the file occupies in memory."]
    #[doc = " @return fiftyoneDegreesDataSetInitStatus indicating the result of the reload"]
    #[doc = " \t   operation."]
    pub fn fiftyoneDegreesProviderReloadFromMemory(
        provider: *mut fiftyoneDegreesProvider,
        source: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_long,
    ) -> fiftyoneDegreesDataSetInitStatus;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the drift parameter for detection. By default, the drift is set to"]
    #[doc = " zero. The drift parameter indicates how much the range is extended when"]
    #[doc = " searching for a substring in a User-Agent. For example, if the drift is"]
    #[doc = " set to one, then in addition to searching in the range first to last,"]
    #[doc = " the range is extended to (first - 1) and (last + 1)."]
    #[doc = " @param provider pointer to the provider to set the drift in"]
    #[doc = " @param drift value of drift to set."]
    pub fn fiftyoneDegreesSetDrift(
        provider: *mut fiftyoneDegreesProvider,
        drift: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Sets the difference parameter for detection. By default, the difference is"]
    #[doc = " set to zero. The difference parameter indicates the allowed difference in"]
    #[doc = " hash value. This is most useful for the last character of a sub string, as"]
    #[doc = " the sub string's hash code will be changed only be the change in ASCII value"]
    #[doc = " of the final character. For example, if \"Chrome 51\" has the hash code 1234,"]
    #[doc = " then \"Chrome 52\" will have the hash code 1235."]
    #[doc = " @param provider pointer to the provider to set the difference in"]
    #[doc = " @param difference value of difference to set."]
    pub fn fiftyoneDegreesSetDifference(
        provider: *mut fiftyoneDegreesProvider,
        difference: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " Determines if the compiled code supports multi threading."]
    #[doc = " @return boolean where true means multi threading is supported."]
    pub fn fiftyoneDegreesGetIsThreadSafe() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "x"]
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " @param dataSet pointer to an initialised data set."]
    #[doc = " @returns the format of the data set used contained in the source file."]
    pub fn fiftyoneDegreesGetDataSetFormat(
        dataSet: *mut fiftyoneDegreesDataSet,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " \\ingroup FiftyOneDegreesFunctions"]
    #[doc = " @param dataSet pointer to an initialised data set."]
    #[doc = " @returns the name of the data set used contained in the source file."]
    pub fn fiftyoneDegreesGetDataSetName(
        dataSet: *mut fiftyoneDegreesDataSet,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
