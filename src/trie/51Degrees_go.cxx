/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: src\trie\51Degrees.i

#define SWIGMODULE FiftyOneDegreesTrieV3

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


	#include "Provider.hpp"
	#include "Match.hpp"

	#ifdef SWIGPHP
	Provider *provider;

	PHP_INI_BEGIN()
	PHP_INI_ENTRY("FiftyOneDegreesTrieV3.data_file", "/usr/lib/php5/51Degrees.trie", PHP_INI_ALL, NULL)
	PHP_INI_ENTRY("FiftyOneDegreesTrieV3.property_list", NULL, PHP_INI_ALL, NULL)
	PHP_INI_END()
	#endif



#include <string>


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_FiftyOneDegreesTrieV3_0acf7431d65d9469(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_FiftyOneDegreesTrieV3_0acf7431d65d9469(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::map< std::string,std::string > *_wrap_new_MapStringString__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469() {
  std::map< std::string,std::string > *result = 0 ;
  std::map< std::string,std::string > *_swig_go_result;
  
  
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::map< std::string,std::string > **)&_swig_go_result = (std::map< std::string,std::string > *)result; 
  return _swig_go_result;
}


std::map< std::string,std::string > *_wrap_new_MapStringString__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  std::map< std::string,std::string > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::map< std::string,std::string > **)&_swig_go_result = (std::map< std::string,std::string > *)result; 
  return _swig_go_result;
}


intgo _wrap_MapStringString_size_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MapStringString_empty_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MapStringString_clear_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


_gostring_ _wrap_MapStringString_get_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      try {
        result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
      ;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_MapStringString_set_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


void _wrap_MapStringString_del_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      try {
        std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
      ;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


bool _wrap_MapStringString_has_key_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_MapStringString_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorString_size_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorString_capacity_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorString_reserve_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


bool _wrap_VectorString_isEmpty_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorString_clear_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


void _wrap_VectorString_add_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


_gostring_ _wrap_VectorString_get_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
      ;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_VectorString_set_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
      ;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


void _wrap_delete_VectorString_FiftyOneDegreesTrieV3_0acf7431d65d9469(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


void _wrap_delete_Match_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0) {
  Match *arg1 = (Match *) 0 ;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


std::vector< std::string > *_wrap_Match_getValues__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, _gostring_ _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->getValues((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_Match_getValues__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, intgo _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  int arg2 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (arg1)->getValues(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Match_getValue__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, _gostring_ _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->getValue((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Match_getValue__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, intgo _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (arg1)->getValue(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


bool _wrap_Match_getValueAsBool__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, _gostring_ _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)(arg1)->getValueAsBool((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Match_getValueAsBool__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, intgo _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (bool)(arg1)->getValueAsBool(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Match_getValueAsInteger__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, _gostring_ _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (int)(arg1)->getValueAsInteger((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Match_getValueAsInteger__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, intgo _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (int)(arg1)->getValueAsInteger(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Match_getValueAsDouble__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, _gostring_ _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (double)(arg1)->getValueAsDouble((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Match_getValueAsDouble__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0, intgo _swig_go_1) {
  Match *arg1 = (Match *) 0 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (double)(arg1)->getValueAsDouble(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Match_getDeviceId_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0) {
  Match *arg1 = (Match *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getDeviceId();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_Match_getRank_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0) {
  Match *arg1 = (Match *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getRank();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Match_getDifference_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0) {
  Match *arg1 = (Match *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getDifference();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Match_getMethod_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0) {
  Match *arg1 = (Match *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getMethod();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Match_getUserAgent_FiftyOneDegreesTrieV3_0acf7431d65d9469(Match *_swig_go_0) {
  Match *arg1 = (Match *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Match **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getUserAgent();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


Provider *_wrap_new_Provider__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  Provider *result = 0 ;
  Provider *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Provider **)&_swig_go_result = (Provider *)result; 
  return _swig_go_result;
}


Provider *_wrap_new_Provider__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Provider *result = 0 ;
  Provider *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Provider **)&_swig_go_result = (Provider *)result; 
  return _swig_go_result;
}


Provider *_wrap_new_Provider__SWIG_2_FiftyOneDegreesTrieV3_0acf7431d65d9469(_gostring_ _swig_go_0, std::vector< std::string > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  Provider *result = 0 ;
  Provider *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1,*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Provider **)&_swig_go_result = (Provider *)result; 
  return _swig_go_result;
}


void _wrap_delete_Provider_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


std::vector< std::string > *_wrap_Provider_getHttpHeaders_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getHttpHeaders();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_Provider_getAvailableProperties_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getAvailableProperties();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Provider_getDataSetName_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getDataSetName();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Provider_getDataSetFormat_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getDataSetFormat();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Provider_getDataSetPublishedDate_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getDataSetPublishedDate();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Provider_getDataSetNextUpdateDate_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getDataSetNextUpdateDate();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_Provider_getDataSetSignatureCount_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getDataSetSignatureCount();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Provider_getDataSetDeviceCombinations_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getDataSetDeviceCombinations();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


Match *_wrap_Provider_getMatch__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, _gostring_ _swig_go_1) {
  Provider *arg1 = (Provider *) 0 ;
  std::string *arg2 = 0 ;
  Match *result = 0 ;
  Match *_swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (Match *)(arg1)->getMatch((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Match **)&_swig_go_result = (Match *)result; 
  return _swig_go_result;
}


Match *_wrap_Provider_getMatch__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, std::map< std::string,std::string > *_swig_go_1) {
  Provider *arg1 = (Provider *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  Match *result = 0 ;
  Match *_swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string > **)&_swig_go_1; 
  
  {
    try {
      result = (Match *)(arg1)->getMatch((std::map< std::string,std::string > const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Match **)&_swig_go_result = (Match *)result; 
  return _swig_go_result;
}


Match *_wrap_Provider_getMatchWithTolerances__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  Provider *arg1 = (Provider *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  Match *result = 0 ;
  Match *_swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      result = (Match *)(arg1)->getMatchWithTolerances((std::string const &)*arg2,arg3,arg4);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Match **)&_swig_go_result = (Match *)result; 
  return _swig_go_result;
}


Match *_wrap_Provider_getMatchWithTolerances__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, std::map< std::string,std::string > *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  Provider *arg1 = (Provider *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  Match *result = 0 ;
  Match *_swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string > **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      result = (Match *)(arg1)->getMatchWithTolerances((std::map< std::string,std::string > const &)*arg2,arg3,arg4);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Match **)&_swig_go_result = (Match *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Provider_getMatchJson__SWIG_0_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, _gostring_ _swig_go_1) {
  Provider *arg1 = (Provider *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->getMatchJson((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Provider_getMatchJson__SWIG_1_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, std::map< std::string,std::string > *_swig_go_1) {
  Provider *arg1 = (Provider *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string > **)&_swig_go_1; 
  
  {
    try {
      result = (arg1)->getMatchJson((std::map< std::string,std::string > const &)*arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_Provider_setDrift_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, intgo _swig_go_1) {
  Provider *arg1 = (Provider *) 0 ;
  int arg2 ;
  
  arg1 = *(Provider **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      (arg1)->setDrift(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


void _wrap_Provider_setDifference_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, intgo _swig_go_1) {
  Provider *arg1 = (Provider *) 0 ;
  int arg2 ;
  
  arg1 = *(Provider **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      (arg1)->setDifference(arg2);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


void _wrap_Provider_reloadFromFile_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      (arg1)->reloadFromFile();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


void _wrap_Provider_reloadFromMemory_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  Provider *arg1 = (Provider *) 0 ;
  unsigned char *arg2 ;
  int arg3 ;
  
  arg1 = *(Provider **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      (arg1)->reloadFromMemory(arg2,arg3);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
}


bool _wrap_Provider_getIsThreadSafe_FiftyOneDegreesTrieV3_0acf7431d65d9469(Provider *_swig_go_0) {
  Provider *arg1 = (Provider *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Provider **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->getIsThreadSafe();;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


Provider *_wrap_new_Provider__SWIG_3_FiftyOneDegreesTrieV3_0acf7431d65d9469(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  Provider *result = 0 ;
  Provider *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1,(std::string const &)*arg2,arg3);;
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  *(Provider **)&_swig_go_result = (Provider *)result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

