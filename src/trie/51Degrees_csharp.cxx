/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_FiftyOneDegreesTrieV3(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_FiftyOneDegreesTrieV3(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_FiftyOneDegreesTrieV3(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




	#include "Provider.hpp"
	#include "Match.hpp"

	#ifdef SWIGPHP
	Provider *provider;

	PHP_INI_BEGIN()
	PHP_INI_ENTRY("FiftyOneDegreesTrieV3.data_file", "/usr/lib/php5/51Degrees.trie", PHP_INI_ALL, NULL)
	PHP_INI_ENTRY("FiftyOneDegreesTrieV3.property_list", NULL, PHP_INI_ALL, NULL)
	PHP_INI_END()
	#endif



SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <string>


#include <stdexcept>


#include <utility>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::map< std::string,std::string >::mapped_type const &std_map_Sl_std_string_Sc_std_string_Sg__getitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__setitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__Add(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &val){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::string >(key, val));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__Remove(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(std::map< std::string,std::string > *self){
        return new std::map< std::string, std::string, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,std::string >::key_type const &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_MapStringString__SWIG_0___() {
  void * jresult ;
  std::map< std::string,std::string > *result = 0 ;
  
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_MapStringString__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string,std::less< std::string > > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  arg1 = (std::map< std::string,std::string,std::less< std::string > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string,std::less< std::string > > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string,std::less< std::string > > const &)*arg1);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_size___(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::size_type result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  {
    try {
      result = ((std::map< std::string,std::string > const *)arg1)->size();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_empty___(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_Clear___(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_getitem___(void * jarg1, char * jarg2) {
  char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      try {
        result = (std::map< std::string,std::string >::mapped_type *) &std_map_Sl_std_string_Sc_std_string_Sg__getitem(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_setitem___(void * jarg1, char * jarg2, char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      std_map_Sl_std_string_Sc_std_string_Sg__setitem(arg1,(std::string const &)*arg2,(std::string const &)*arg3);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_ContainsKey___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_Add___(void * jarg1, char * jarg2, char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_std_string_Sg__Add(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_Remove___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__Remove(arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_create_iterator_begin___(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(arg1);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_get_next_key___(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  {
    try {
      result = (std::map< std::string,std::string >::key_type *) &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(arg1,arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_MapStringString_destroy_iterator___(void * jarg1, void * jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  {
    try {
      std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(arg1,arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_delete_MapStringString___(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Clear___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Add___(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->push_back((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_VectorString__SWIG_0___() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_VectorString__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_VectorString__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_getitemcopy___(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_getitem___(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_setitem___(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Insert___(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Repeat___(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      ;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Contains___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_IndexOf___(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_LastIndexOf___(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_VectorString_Remove___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_delete_VectorString___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_delete_Match___(void * jarg1) {
  Match *arg1 = (Match *) 0 ;
  
  arg1 = (Match *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getValues__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  Match *arg1 = (Match *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (Match *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (arg1)->getValues((char const *)arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getValues__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  Match *arg1 = (Match *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  arg1 = (Match *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->getValues(*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getValues__SWIG_2___(void * jarg1, int jarg2) {
  void * jresult ;
  Match *arg1 = (Match *) 0 ;
  int arg2 ;
  std::vector< std::string > result;
  
  arg1 = (Match *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValues(arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getValue__SWIG_0___(void * jarg1, char * jarg2) {
  char * jresult ;
  Match *arg1 = (Match *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (Match *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (arg1)->getValue((char const *)arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getValue__SWIG_1___(void * jarg1, void * jarg2) {
  char * jresult ;
  Match *arg1 = (Match *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (Match *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->getValue(*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getValue__SWIG_2___(void * jarg1, int jarg2) {
  char * jresult ;
  Match *arg1 = (Match *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (Match *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValue(arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getDeviceId___(void * jarg1) {
  char * jresult ;
  Match *arg1 = (Match *) 0 ;
  std::string result;
  
  arg1 = (Match *)jarg1; 
  {
    try {
      result = (arg1)->getDeviceId();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getRank___(void * jarg1) {
  int jresult ;
  Match *arg1 = (Match *) 0 ;
  int result;
  
  arg1 = (Match *)jarg1; 
  {
    try {
      result = (int)(arg1)->getRank();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getDifference___(void * jarg1) {
  int jresult ;
  Match *arg1 = (Match *) 0 ;
  int result;
  
  arg1 = (Match *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDifference();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getMethod___(void * jarg1) {
  int jresult ;
  Match *arg1 = (Match *) 0 ;
  int result;
  
  arg1 = (Match *)jarg1; 
  {
    try {
      result = (int)(arg1)->getMethod();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Match_getUserAgent___(void * jarg1) {
  char * jresult ;
  Match *arg1 = (Match *) 0 ;
  std::string result;
  
  arg1 = (Match *)jarg1; 
  {
    try {
      result = (arg1)->getUserAgent();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_Provider__SWIG_0___(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Provider *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_Provider__SWIG_1___(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Provider *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1,(std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_Provider__SWIG_2___(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  Provider *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1,*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_delete_Provider___(void * jarg1) {
  Provider *arg1 = (Provider *) 0 ;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getHttpHeaders___(void * jarg1) {
  void * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (arg1)->getHttpHeaders();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getAvailableProperties___(void * jarg1) {
  void * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (arg1)->getAvailableProperties();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getDataSetName___(void * jarg1) {
  char * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (arg1)->getDataSetName();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getDataSetFormat___(void * jarg1) {
  char * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (arg1)->getDataSetFormat();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getDataSetPublishedDate___(void * jarg1) {
  char * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (arg1)->getDataSetPublishedDate();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getDataSetNextUpdateDate___(void * jarg1) {
  char * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::string result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (arg1)->getDataSetNextUpdateDate();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getDataSetSignatureCount___(void * jarg1) {
  int jresult ;
  Provider *arg1 = (Provider *) 0 ;
  int result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDataSetSignatureCount();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getDataSetDeviceCombinations___(void * jarg1) {
  int jresult ;
  Provider *arg1 = (Provider *) 0 ;
  int result;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDataSetDeviceCombinations();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getMatch__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::string *arg2 = 0 ;
  Match *result = 0 ;
  
  arg1 = (Provider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Match *)(arg1)->getMatch((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getMatch__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  Match *result = 0 ;
  
  arg1 = (Provider *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string,std::less< std::string > > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Match *)(arg1)->getMatch((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getMatchJson__SWIG_0___(void * jarg1, char * jarg2) {
  char * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (Provider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getMatchJson((std::string const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_getMatchJson__SWIG_1___(void * jarg1, void * jarg2) {
  char * jresult ;
  Provider *arg1 = (Provider *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  std::string result;
  
  arg1 = (Provider *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string,std::less< std::string > > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->getMatchJson((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_reloadFromFile___(void * jarg1) {
  Provider *arg1 = (Provider *) 0 ;
  
  arg1 = (Provider *)jarg1; 
  {
    try {
      (arg1)->reloadFromFile();;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_Provider_reloadFromMemory___(void * jarg1, char * jarg2, int jarg3) {
  Provider *arg1 = (Provider *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Provider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->reloadFromMemory((std::string const &)*arg2,arg3);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefMobilefDetectionfProviderfInteropfTrie_new_Provider__SWIG_3___(char * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  Provider *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (Provider *)new Provider((std::string const &)*arg1,(std::string const &)*arg2,arg3);;
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

