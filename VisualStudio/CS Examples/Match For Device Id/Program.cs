/**
 * This Source Code Form is copyright of 51Degrees Mobile Experts Limited.
 * Copyright (c) 2015 51Degrees Mobile Experts Limited, 5 Charlotte Close,
 * Caversham, Reading, Berkshire, United Kingdom RG4 7BY
 * 
 * This Source Code Form is the subject of the following patent
 * applications, owned by 51Degrees Mobile Experts Limited of 5 Charlotte
 * Close, Caversham, Reading, Berkshire, United Kingdom RG4 7BY:
 * European Patent Application No. 13192291.6; and
 * United States Patent Application Nos. 14/085,223 and 14/085,301.
 * 
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0.
 * 
 * If a copy of the MPL was not distributed with this file, You can obtain
 * one at http://mozilla.org/MPL/2.0/.
 * 
 * This Source Code Form is "Incompatible With Secondary Licenses", as
 * defined by the Mozilla Public License, v. 2.0.
 */

/*
<tutorial>
Match for device id example of using 51Degrees device detection. The example 
shows how to:
<ol>
    <li>Initialise detector with path to the 51Degrees device data file and 
    a list of properties.
    <p><code>
        string properties = "IsMobile";<br />
        string fileName = args[0];<br />
        Provider provider = new Provider(FileName, properties);
    </code></p>
    <li>Produce a match for a single device ID.
    <p><code>
        Match match;
        using (match = provider.getMatchForDeviceId(userAgent)) {
            // Do something with match result.
        }
    </code></p>
    <li>Extract the value of the IsMobile property.
    <p><code>
        string IsMobile;
        IsMobile = match.getValue("IsMobile");
    </code></p>
    <li> Dispose of the Provider releasing the resources.
    <p><code>
        provider.Dispose();
    </code></p>
</ol>
<p>
    This tutorial assumes you are building this example using Visual Studio. 
    You should supply path to the 51Degrees device data file that you wish to 
    use as a command line argument.
</p>
<p>
    By default the API is distributed with Lite data which is free to use for 
    both the non-commercial and commercial purposes. Lite data file contains 
    over 60 properties. For more properties like DeviceType, PriceBand and 
    HardwareVendor check out the Premium and Enterprise data files:
    https://51degrees.com/compare-data-options
</p>
<p>
    Passing a list of properties to the provider constructor limits the number 
    of properties in the dataset the provider wraps to only the chosen 
    properties. Not providing a list or providing an empty list will cause the 
    dataset to be created with all available properties:
    <br /><code>
        Provider provider = new Provider(fileName, "");
        Provider provider = new Provider(fileName);
    </code>
</p>
<p>
    This code works with the assembly generated by SWIG from the 51Degrees C 
    source files. The garbage collection does not apply to the SWIG-generated 
    code. You should always use the Dispose() methods on any objects that 
    originate from the unmanaged code.
</p>
<p>
    Match retrieves the workset from the pool of worksets and not disposing 
    of the Match objects will eventually exhaust the pool and cause the 
    program to stall as it waits for the free workset. We recommend you either 
    use Match object in the context of a using statement or within the try 
    finally block where the match is disposed of if not null.
</p>
<p>
    Provider wraps the dataset which is the data file loaded into memory and 
    ready to be used through the methods exposed by the Provider. Failing to 
    dispose of the provider when it is no longer required means the memory 
    allocated for the provider, cache, pool and the dataset will never be 
    released.
</p>
<p>
    Device ID consists of four profile IDs separated by hyphen. Each ID 
    belongs to a specific component: Hardware-Software-Browser-Crawler.
    Different browsers can be used on the same device, hence only the 
    browser ID will change in the device ID string. Similarly different OS 
    can run on the same hardware, which is reflected by a change in the 
    software component in the device ID string.
    For more information see:
    https://51degrees.com/support/documentation/device-detection-data-model
    and
    https://51degrees.com/support/documentation/pattern
</p>
<p>
    Storing detection results for future use is more efficient when keeping 
    track of the device ID only and not storing the individual properties 
    and/or values. However please note that profiles are added as well as 
    removed for every new data file, so one or more profiles may no longer 
    be available after some time.
</p>
</tutorial>
*/
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FiftyOne.Mobile.Detection.Provider.Interop.Pattern;

namespace FiftyOne.Example.Illustration.CSharp.MatchForDeviceId
{
    public class Program
    {
        // Snippet Start
        /// <summary>
        /// Runs the program.
        /// </summary>
        /// <param name="fileName">
        /// Path to the 51Degrees device data file.
        /// </param>
        public static void Run(string fileName)
        {
            // Device id string of an iPhone mobile device.
            string mobileDeviceId = "12280-48866-24305-18092";
            // Device id string of Firefox Web browser version 41 on desktop.
            string desktopDeviceId = "15364-21460-53251-18092";
            // Device id string of a MediaHub device.
            string mediaHubDeviceId = "41231-46303-24154-18092";

            Provider provider = new Provider(fileName);

            Console.WriteLine("Starting Match For Device Id Example.");

            // Carries out a match for a mobile device id.
            Console.WriteLine("\nMobile Device Id: " + mobileDeviceId);
            detect(provider, mobileDeviceId, "True");

            // Carries out a match for a desktop device id.
            Console.WriteLine("\nDesktop Device Id: " + desktopDeviceId);
            detect(provider, desktopDeviceId, "False");

            // Carries out a match for a MediaHub device id.
            Console.WriteLine("\nMediaHub Device Id: " + mediaHubDeviceId);
            detect(provider, mediaHubDeviceId, "False");

            // At the end of the program dispose of the data file to 
            // deallocate memory.
            provider.Dispose();
        }

        /// <summary>
        /// Performs detection by invoking the getMatchForDeviceId method of 
        /// the provider and disposing of the match result object after 
        /// printing result and performing Assert.
        /// </summary>
        /// <remarks>
        /// When working with Match objects you should always call dispose in 
        /// order to free the match and return the workset to the pool of 
        /// worksets.
        /// </remarks>
        /// <param name="provider">
        /// FiftyOne Provider that enables methods to interact with the 
        /// 51Degrees device data file.
        /// </param>
        /// <param name="userAgent">
        /// A string containing the HTTP User-Agent to identify.
        /// </param>
        /// <param name="expected">
        /// Used for test purposes only. Contains the expected value for the 
        /// IsMobile property.
        /// </param>
        public static void detect(Provider provider, 
                                  string userAgent, 
                                  string expected)
        {
            string IsMobile;
            Match match;

            using (match = provider.getMatchForDeviceId(userAgent))
            {
                IsMobile = match.getValue("IsMobile");
                Assert.AreEqual(expected, IsMobile);
                Console.WriteLine("   IsMobile: " + IsMobile);
            }
        }

        // Snippet End

        static void Main(string[] args)
        {
            string fileName = args.Length > 0 ? args[0] : 
                "../../../../../../data/51Degrees-LiteV3.2.dat";
            Run(fileName);

            // Waits for a character to be pressed.
            Console.ReadKey();
        }
    }
}
