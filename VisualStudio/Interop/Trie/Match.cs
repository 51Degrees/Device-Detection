//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.Mobile.Detection.Provider.Interop.Trie {

public partial class Match : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Match(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Match obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Match obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Match() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FiftyOneDegreesTrieV3PINVOKE.delete_Match(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public VectorString getValues(string propertyName) {
    VectorString ret = new VectorString(FiftyOneDegreesTrieV3PINVOKE.Match_getValues__SWIG_0(swigCPtr, propertyName), true);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorString getValues(int propertyIndex) {
    VectorString ret = new VectorString(FiftyOneDegreesTrieV3PINVOKE.Match_getValues__SWIG_1(swigCPtr, propertyIndex), true);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getValue(string propertyName) {
    string ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValue__SWIG_0(swigCPtr, propertyName);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getValue(int propertyIndex) {
    string ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValue__SWIG_1(swigCPtr, propertyIndex);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getValueAsBool(string propertyName) {
    bool ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValueAsBool__SWIG_0(swigCPtr, propertyName);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getValueAsBool(int requiredPropertyIndex) {
    bool ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValueAsBool__SWIG_1(swigCPtr, requiredPropertyIndex);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getValueAsInteger(string propertyName) {
    int ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValueAsInteger__SWIG_0(swigCPtr, propertyName);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getValueAsInteger(int requiredPropertyIndex) {
    int ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValueAsInteger__SWIG_1(swigCPtr, requiredPropertyIndex);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getValueAsDouble(string propertyName) {
    double ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValueAsDouble__SWIG_0(swigCPtr, propertyName);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getValueAsDouble(int requiredPropertyIndex) {
    double ret = FiftyOneDegreesTrieV3PINVOKE.Match_getValueAsDouble__SWIG_1(swigCPtr, requiredPropertyIndex);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getDeviceId() {
    string ret = FiftyOneDegreesTrieV3PINVOKE.Match_getDeviceId(swigCPtr);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getRank() {
    int ret = FiftyOneDegreesTrieV3PINVOKE.Match_getRank(swigCPtr);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getDifference() {
    int ret = FiftyOneDegreesTrieV3PINVOKE.Match_getDifference(swigCPtr);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getMethod() {
    int ret = FiftyOneDegreesTrieV3PINVOKE.Match_getMethod(swigCPtr);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getUserAgent() {
    string ret = FiftyOneDegreesTrieV3PINVOKE.Match_getUserAgent(swigCPtr);
    if (FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Pending) throw FiftyOneDegreesTrieV3PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
